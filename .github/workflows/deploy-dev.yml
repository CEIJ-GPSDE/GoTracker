name: Deploy Development Branch

on:
  push:
    branches:
      - 'dev/**'
  workflow_dispatch:
    inputs:
      branch:
        description: "Development branch to deploy"
        required: true
        type: string
      deploy_to_EC2_1:
        description: "Deploy to EC2_1"
        type: boolean
        default: false
      deploy_to_EC2_2:
        description: "Deploy to EC2_2"
        type: boolean
        default: false
      deploy_to_EC2_3:
        description: "Deploy to EC2_3"
        type: boolean
        default: false
      deploy_to_EC2_4:
        description: "Deploy to EC2_4"
        type: boolean
        default: false


jobs:
  deploy-development:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        instance: [EC2_1, EC2_2, EC2_3, EC2_4]
      fail-fast: false
    steps:
      - name: Validate inputs for workflow_dispatch
        if: github.event_name == 'workflow_dispatch'
        run: |
          if [ -z "${{ github.event.inputs.branch }}" ]; then
            echo "ERROR: Branch input is required for manual deployment"
            exit 1
          fi
          # Check if at least one EC2 instance is selected
          if [ "${{ github.event.inputs.deploy_to_EC2_1 }}" != "true" ] && \
             [ "${{ github.event.inputs.deploy_to_EC2_2 }}" != "true" ] && \
             [ "${{ github.event.inputs.deploy_to_EC2_3 }}" != "true" ] && \
             [ "${{ github.event.inputs.deploy_to_EC2_4 }}" != "true" ]; then
            echo "ERROR: At least one EC2 instance must be selected for deployment"
            exit 1
          fi
          echo "Input validation passed: branch=${{ github.event.inputs.branch }}"

      - name: Determine deployment
        id: should_deploy
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Matrix instance: ${{ matrix.instance }}"
          echo "Matrix deploy: ${{ matrix.deploy }}"
          if [ "${{ github.event_name }}" = "push" ]; then
            case "${{ github.ref_name }}" in
              "dev/cesar")
                if [ "${{ matrix.instance }}" = "EC2_1" ]; then
                  echo "deploy=true" >> $GITHUB_OUTPUT
                  echo "branch=dev/cesar" >> $GITHUB_OUTPUT
                  echo "Deploying dev/cesar to EC2_1 (triggered by push)"
                else
                  echo "deploy=false" >> $GITHUB_OUTPUT
                  echo "Skipping ${{ matrix.instance }} for dev/cesar push"
                fi
                ;;
              "dev/Barrios")
                if [ "${{ matrix.instance }}" = "EC2_2" ]; then
                  echo "deploy=true" >> $GITHUB_OUTPUT
                  echo "branch=dev/Barrios" >> $GITHUB_OUTPUT
                  echo "Deploying dev/Barrios to EC2_2 (triggered by push)"
                else
                  echo "deploy=false" >> $GITHUB_OUTPUT
                  echo "Skipping ${{ matrix.instance }} for dev/Barrios push"
                fi
                ;;
              "dev/uribe")
                if [ "${{ matrix.instance }}" = "EC2_3" ]; then
                  echo "deploy=true" >> $GITHUB_OUTPUT
                  echo "branch=dev/uribe" >> $GITHUB_OUTPUT
                  echo "Deploying dev/uribe to EC2_3 (triggered by push)"
                else
                  echo "deploy=false" >> $GITHUB_OUTPUT
                  echo "Skipping ${{ matrix.instance }} for dev/uribe push"
                fi
                ;;
              "dev/carmona")
                if [ "${{ matrix.instance }}" = "EC2_4" ]; then
                  echo "deploy=true" >> $GITHUB_OUTPUT
                  echo "branch=dev/carmona" >> $GITHUB_OUTPUT
                  echo "Deploying dev/carmona to EC2_4 (triggered by push)"
                else
                  echo "deploy=false" >> $GITHUB_OUTPUT
                  echo "Skipping ${{ matrix.instance }} for dev/carmona push"
                fi
                ;;
              *)
                echo "deploy=false" >> $GITHUB_OUTPUT
                echo "Unknown dev branch: ${{ github.ref_name }}"
                ;;
            esac
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "deploy=${{ matrix.deploy }}" >> $GITHUB_OUTPUT
            echo "branch=${{ github.event.inputs.branch }}" >> $GITHUB_OUTPUT
            echo "Manual deployment for branch: ${{ github.event.inputs.branch }} to ${{ matrix.instance }} (deploy: ${{ matrix.deploy }})"
          else
            echo "deploy=false" >> $GITHUB_OUTPUT
            echo "Unknown event type, skipping deployment"
          fi
          echo "Final deploy decision: ${{ steps.should_deploy.outputs.deploy }}"
          echo "Selected branch: ${{ steps.should_deploy.outputs.branch }}"

      - name: Skip unchecked instances
        if: steps.should_deploy.outputs.deploy != 'true'
        run: |
          echo "Skipping ${{ matrix.instance }} - not selected for deployment (deploy: ${{ steps.should_deploy.outputs.deploy }})"

      - name: Cleanup development branch deployment
        if: steps.should_deploy.outputs.deploy == 'true'
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            branch="${{ steps.should_deploy.outputs.branch }}"
            safe_branch=$(echo "$branch" | tr '/' '-' | tr '[:upper:]' '[:lower:]')
            container_name="location-tracker-${safe_branch}"
            nginx_location="/test"
            
            echo "=== Cleaning up development branch deployment: $branch ==="
            echo "Container name: $container_name"
            echo "Nginx location: $nginx_location"
            
            # Stop and remove dev container
            echo "Stopping and removing Docker container..."
            if docker ps -a --format '{{.Names}}' | grep -q "^${container_name}$"; then
              echo "Found container: $container_name"
              docker stop $container_name || echo "Container was not running"
              docker rm -f $container_name || echo "Failed to remove container"
              echo "Container removed successfully"
            else
              echo "Container $container_name not found (already cleaned up)"
            fi
            
            # Remove dev image
            echo "Removing Docker image..."
            if docker images --format '{{.Repository}}:{{.Tag}}' | grep -q "^location-tracker:${safe_branch}$"; then
              echo "Found image: location-tracker:${safe_branch}"
              docker rmi -f location-tracker:${safe_branch} || echo "Failed to remove image"
              echo "Image removed successfully"
            else
              echo "Image location-tracker:${safe_branch} not found (already cleaned up)"
            fi
            
            # Clean up any leftover tar files
            echo "Cleaning up temporary files..."
            rm -f /tmp/location-tracker-${safe_branch}.tar || echo "No tar file to clean up"
            
            # Remove the modular nginx configuration file
            echo "Removing nginx configuration file..."
            sudo rm -f /etc/nginx/conf.d/location-tracker/dev-${safe_branch}.conf
            echo "Development branch nginx configuration removed"
            
            # Reload nginx to apply changes
            if sudo nginx -t; then
              sudo systemctl reload nginx
              echo "✅ Nginx configuration reloaded after cleanup"
            else
              echo "WARNING: Nginx configuration test failed after cleanup"
              sudo nginx -t
            fi
            
            # Check if port 8081 is still in use
            echo "Checking if port 8081 is still in use..."
            if sudo lsof -i :8081 2>/dev/null; then
              echo "WARNING: Port 8081 still in use by:"
              sudo lsof -i :8081
              echo "Attempting to terminate processes..."
              sudo lsof -i :8081 | awk 'NR>1 {print $2}' | xargs -r sudo kill -9 || echo "Failed to terminate some processes"
            else
              echo "✅ Port 8081 is now free"
            fi
            
            # Check if port 5052 is still in use  
            echo "Checking if port 5052 is still in use..."
            if sudo lsof -i :5052 2>/dev/null; then
              echo "WARNING: Port 5052 still in use by:"
              sudo lsof -i :5052
              echo "Attempting to terminate processes..."
              sudo lsof -i :5052 | awk 'NR>1 {print $2}' | xargs -r sudo kill -9 || echo "Failed to terminate some processes"
            else
              echo "✅ Port 5052 is now free"
            fi
            
            echo "Development cleanup completed"

      - uses: actions/checkout@v4
        if: steps.should_deploy.outputs.deploy == 'true'
        with:
          ref: ${{ steps.should_deploy.outputs.branch }}

      - name: Set safe branch name and instance info
        if: steps.should_deploy.outputs.deploy == 'true'
        id: prepare
        run: |
          branch="${{ steps.should_deploy.outputs.branch }}"
          safe_branch=$(echo "$branch" | tr '/' '-' | tr '[:upper:]' '[:lower:]')
          echo "safe_branch=$safe_branch" >> $GITHUB_OUTPUT
          echo "Branch: $branch -> Safe: $safe_branch"
          echo "Instance: ${{ matrix.instance }}"

      - name: Modify HTML with instance name
        if: steps.should_deploy.outputs.deploy == 'true'
        run: |
          instance_name="${{ secrets[format('{0}_PAGE_NAME', matrix.instance)] }}"
          branch="${{ steps.should_deploy.outputs.branch }}"
          
          # Default to matrix.instance if secret is not set
          if [ -z "$instance_name" ]; then
            instance_name="${{ matrix.instance }}"
          fi
          
          echo "Using instance name: $instance_name"
          echo "Branch: $branch"

          ls
          
          # Modify the HTML title to include instance name and branch
          sed -i "s|<title>Real-time Location Tracker</title>|<title>$instance_name ($branch)</title>|g" ./static/index.html
          
          # Also update the h1 header to show the instance
          sed -i "s|<h1>🌍 Real-time Location Tracker</h1>|<h1>🌐 $instance_name (DEV)</h1>|g" ./static/index.html
          
          echo "HTML modifications completed"

      - name: Build Docker image
        if: steps.should_deploy.outputs.deploy == 'true'
        run: |
          branch="${{ steps.should_deploy.outputs.branch }}"
          safe_branch="${{ steps.prepare.outputs.safe_branch }}"
          base_path="/test"
          echo "Building Docker image for dev branch: $branch with BASE_PATH: $base_path"
          docker build \
            --build-arg VERSION=${safe_branch}-$(git rev-parse --short HEAD) \
            --build-arg BASE_PATH="$base_path" \
            -t location-tracker:${safe_branch} \
            .
          docker save location-tracker:${safe_branch} > location-tracker-${safe_branch}.tar
          echo "Docker image saved: location-tracker-${safe_branch}.tar"

      - name: Stop existing dev container
        if: steps.should_deploy.outputs.deploy == 'true'
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            safe_branch="${{ steps.prepare.outputs.safe_branch }}"
            container_name="location-tracker-${safe_branch}"
            echo "Cleaning up existing dev deployment: $container_name"
            
            # Stop and remove existing dev container
            if docker ps -a --format '{{.Names}}' | grep -q "^${container_name}$"; then
              echo "Stopping existing container: $container_name"
              docker stop $container_name || echo "Container was not running"
              docker rm $container_name || echo "Failed to remove container"
            fi
            
            # Remove existing dev image
            if docker images --format '{{.Repository}}:{{.Tag}}' | grep -q "^location-tracker:${safe_branch}$"; then
              echo "Removing old image: location-tracker:${safe_branch}"
              docker rmi location-tracker:${safe_branch} || echo "Failed to remove image"
            fi
            
            # Check for and free port 8081 (dev port)
            if sudo lsof -i :8081 2>/dev/null; then
              echo "Found processes using port 8081, attempting to terminate..."
              sudo lsof -i :8081 | awk 'NR>1 {print $2}' | xargs -r sudo kill -9 || echo "Failed to terminate some processes"
              sleep 2
            fi
            
            mkdir -p /home/ec2-user/certs
            echo "Dev cleanup completed"

      - name: Upload Docker image
        if: steps.should_deploy.outputs.deploy == 'true'
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          source: location-tracker-${{ steps.prepare.outputs.safe_branch }}.tar
          target: /tmp/

      - name: Deploy SSL certificates
        if: steps.should_deploy.outputs.deploy == 'true'
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            mkdir -p /home/ec2-user/certs
            if [ -n "${{ secrets[format('{0}_SSL_CERT', matrix.instance)] }}" ]; then
              echo "Deploying SSL certificate for development branch..."
              echo "${{ secrets[format('{0}_SSL_CERT', matrix.instance)] }}" > /home/ec2-user/certs/server.crt
              chmod 644 /home/ec2-user/certs/server.crt
            fi
            if [ -n "${{ secrets[format('{0}_SSL_KEY', matrix.instance)] }}" ]; then
              echo "Deploying SSL private key for development branch..."
              echo "${{ secrets[format('{0}_SSL_KEY', matrix.instance)] }}" > /home/ec2-user/certs/server.key
              chmod 600 /home/ec2-user/certs/server.key
            fi

      - name: Update modular Nginx configuration with development branch
        if: steps.should_deploy.outputs.deploy == 'true'
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            branch="${{ steps.should_deploy.outputs.branch }}"
            safe_branch="${{ steps.prepare.outputs.safe_branch }}"
            nginx_location="/test"
            
            echo "Creating modular configuration for development branch: $branch"
            echo "Safe branch name: $safe_branch"
            echo "Nginx location: $nginx_location"
            
            # Ensure the modular configuration directory exists
            sudo mkdir -p /etc/nginx/conf.d/location-tracker
            
            # Remove ALL existing dev configurations (only one dev branch can run at /dev)
            sudo rm -f /etc/nginx/conf.d/location-tracker/dev-*.conf
            
            # Create development branch configuration file
            cat > /tmp/dev-${safe_branch}.conf << EOF
            # Configuration for development branch: $branch
            location $nginx_location/ {
                proxy_pass http://127.0.0.1:8081/;
                proxy_http_version 1.1;
                proxy_set_header Upgrade \$http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host \$host;
                proxy_set_header X-Real-IP \$remote_addr;
                proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto \$scheme;
                proxy_cache_bypass \$http_upgrade;
            }

            location $nginx_location/ws {
                proxy_pass http://127.0.0.1:8081/ws;
                proxy_http_version 1.1;
                proxy_set_header Upgrade \$http_upgrade;
                proxy_set_header Connection "Upgrade";
                proxy_set_header Host \$host;
                proxy_set_header X-Real-IP \$remote_addr;
                proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto \$scheme;
            }
            EOF
            
            # Move the configuration to the nginx directory
            sudo mv /tmp/dev-${safe_branch}.conf /etc/nginx/conf.d/location-tracker/dev-${safe_branch}.conf
            
            # Test configuration
            echo "Testing nginx configuration..."
            if sudo nginx -t; then
              echo "Nginx configuration test passed"
              sudo systemctl reload nginx
              echo "Development branch configuration added successfully"
              
              # Verify the configuration was applied
              echo "Verifying configuration contains development branch:"
              if sudo test -f /etc/nginx/conf.d/location-tracker/dev-${safe_branch}.conf; then
                echo "✅ Development branch configuration file created"
                sudo ls -la /etc/nginx/conf.d/location-tracker/dev-*.conf
              else
                echo "❌ Development branch configuration file NOT found"
              fi
            else
              echo "ERROR: Nginx configuration test failed"
              sudo nginx -t
              exit 1
            fi
            
      - name: Load and start Docker container
        if: steps.should_deploy.outputs.deploy == 'true'
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            branch="${{ steps.should_deploy.outputs.branch }}"
            safe_branch="${{ steps.prepare.outputs.safe_branch }}"
            container_name="location-tracker-${safe_branch}"
            echo "Loading and starting Docker container: $container_name"
            
            if [ -f "/tmp/location-tracker-${safe_branch}.tar" ]; then
              echo "Loading Docker image from tar file..."
              docker load < /tmp/location-tracker-${safe_branch}.tar
            else
              echo "ERROR: Docker image tar file not found"
              exit 1
            fi
            
            echo "Starting Docker container..."
            docker run -d \
              --name $container_name \
              --restart unless-stopped \
              -p 8081:8080 \
              -p 5052:5052/udp \
              -e DB_HOST="${{ secrets[format('{0}_DB_HOST', matrix.instance)] }}" \
              -e DB_NAME="${{ secrets[format('{0}_DB_NAME', matrix.instance)] }}" \
              -e DB_USER="${{ secrets[format('{0}_DB_USER', matrix.instance)] }}" \
              -e DB_PASSWORD="${{ secrets[format('{0}_DB_PASSWORD', matrix.instance)] }}" \
              -e DB_SSLMODE=require \
              -e PORT=8080 \
              -e UDP_PORT=5052 \
              -e DOMAIN="${{ secrets[format('{0}_DOMAIN', matrix.instance)] }}" \
              -e AUTO_TLS=false \
              -e DISABLE_TLS=true \
              -e BASE_PATH="/test" \
              location-tracker:${safe_branch}
            
            echo "Waiting for container to start..."
            sleep 30
            
            if docker ps --format '{{.Names}}' | grep -q "^${container_name}$"; then
              echo "Container started successfully: $container_name"
            else
              echo "ERROR: Container failed to start"
              docker logs $container_name
              exit 1
            fi
            
            rm -f /tmp/location-tracker-${safe_branch}.tar

      - name: Health check and verification
        if: steps.should_deploy.outputs.deploy == 'true'
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            branch="${{ steps.should_deploy.outputs.branch }}"
            safe_branch="${{ steps.prepare.outputs.safe_branch }}"
            container_name="location-tracker-${safe_branch}"
            instance_name="${{ secrets[format('{0}_INSTANCE_NAME', matrix.instance)] }}"
            
            # Default to matrix.instance if secret is not set
            if [ -z "$instance_name" ]; then
              instance_name="${{ matrix.instance }}"
            fi
            
            echo "=== Final Health Check ==="
            echo "Instance: $instance_name"
            echo "Development branch: $branch"
            echo "Container: $container_name"
            
            max_attempts=5
            attempt=1
            while [ $attempt -le $max_attempts ]; do
              echo "Health check attempt $attempt/$max_attempts..."
              if curl -f -s http://localhost:8081/api/health; then
                echo "Health check PASSED"
                echo "=== Development Branch Deployment Successful ==="
                echo "Instance: $instance_name"
                echo "Development branch: $branch"
                echo "Container: $container_name"
                if [ -f /etc/ssl/certs/location-tracker.crt ]; then
                  echo "Public URL: https://${{ secrets[format('{0}_DOMAIN', matrix.instance)] }}/test"
                else
                  echo "Public URL: http://${{ secrets[format('{0}_DOMAIN', matrix.instance)] }}/test"
                fi
                exit 0
              else
                echo "Health check failed (attempt $attempt/$max_attempts)"
                if [ $attempt -lt $max_attempts ]; then
                  sleep 10
                fi
              fi
              attempt=$((attempt + 1))
            done
            
            echo "ERROR: All health checks failed"
            docker logs --tail 50 $container_name
            exit 1