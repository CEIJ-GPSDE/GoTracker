name: Deploy Go App

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to deploy (feature branch only)"
        required: true
      deploy_to_EC2_1:
        description: "Deploy to EC2_1"
        type: boolean
        default: false
      deploy_to_EC2_2:
        description: "Deploy to EC2_2"
        type: boolean
        default: false
      deploy_to_EC2_3:
        description: "Deploy to EC2_3"
        type: boolean
        default: false
      deploy_to_EC2_4:
        description: "Deploy to EC2_4"
        type: boolean
        default: false

jobs:
  # Auto-deploy main branch to all prod instances
  deploy-main:
    if: github.ref_name == 'main'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        instance: [EC2_1, EC2_2, EC2_3, EC2_4]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - name: Build main
        run: |
          go mod tidy
          safe_branch="main"
          mkdir -p build/${safe_branch}/static
          go build -o build/${safe_branch}/app-${safe_branch} main.go
          cp static/index.html build/${safe_branch}/static/index.html
      - name: Prepare deploy folder
        run: |
          safe_branch="main"
          mkdir -p deploy/${safe_branch}
          mv build/${safe_branch}/* deploy/${safe_branch}/
      - name: Upload to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          source: "deploy/main/*"
          target: "/home/ec2-user/app/main/"
          strip_components: 2
      - name: Verify uploaded binary and database connection
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            ls -lR /home/ec2-user/app/
            chmod +x /home/ec2-user/app/main/app-main || echo "Binary not found in expected path"
            export DB_HOST="${{ secrets[format('{0}_DB_HOST', matrix.instance)] }}"
            export DB_NAME="${{ secrets[format('{0}_DB_NAME', matrix.instance)] }}"
            export DB_USER="${{ secrets[format('{0}_DB_USER', matrix.instance)] }}"
            export DB_PASSWORD="${{ secrets[format('{0}_DB_PASSWORD', matrix.instance)] }}"
            export DB_SSLMODE="require"
            export PORT="8080"
            echo "Environment variables: PORT=$PORT, DB_HOST=$DB_HOST, DB_NAME=$DB_NAME, DB_USER=$DB_USER, DB_SSLMODE=$DB_SSLMODE"
            psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME" -c "SELECT 1" || echo "Database connection failed: $?"
            /home/ec2-user/app/main/app-main --version || echo "Failed to run binary: $?"
      - name: Update and restart service
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            safe_branch="main"
            sudo bash -c "cat > /etc/systemd/system/location-tracker@\${safe_branch}.service <<EOF
            [Unit]
            Description=Location Tracker (%i)
            After=network.target

            [Service]
            ExecStart=/home/ec2-user/app/%i/app-%i
            Restart=always
            User=ec2-user
            WorkingDirectory=/home/ec2-user/app/%i
            Environment=DB_HOST=${{ secrets[format('{0}_DB_HOST', matrix.instance)] }}
            Environment=DB_NAME=${{ secrets[format('{0}_DB_NAME', matrix.instance)] }}
            Environment=DB_USER=${{ secrets[format('{0}_DB_USER', matrix.instance)] }}
            Environment=DB_PASSWORD=${{ secrets[format('{0}_DB_PASSWORD', matrix.instance)] }}
            Environment=DB_SSLMODE=require
            Environment=PORT=8080

            [Install]
            WantedBy=multi-user.target
            EOF"
            sudo chmod 644 /etc/systemd/system/location-tracker@${safe_branch}.service
            sudo systemctl daemon-reload
            sudo systemctl restart location-tracker@${safe_branch}
            sudo systemctl enable location-tracker@${safe_branch}
            # Verify service status and logs
            sudo systemctl status location-tracker@${safe_branch} --no-pager -l
            echo "Service environment:"
            sudo systemctl show location-tracker@${safe_branch} --property=Environment
            # Wait a moment and check if service is running
            sleep 5
            if sudo systemctl is-active location-tracker@${safe_branch} >/dev/null; then
              echo "Service is running successfully"
            else
              echo "Service failed to start, checking logs:"
              sudo journalctl -u location-tracker@${safe_branch} --no-pager -l
            fi

  # Manual feature branch deployment
  deploy-feature:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - instance: EC2_1
            deploy: ${{ github.event.inputs.deploy_to_EC2_1 }}
          - instance: EC2_2
            deploy: ${{ github.event.inputs.deploy_to_EC2_2 }}
          - instance: EC2_3
            deploy: ${{ github.event.inputs.deploy_to_EC2_3 }}
          - instance: EC2_4
            deploy: ${{ github.event.inputs.deploy_to_EC2_4 }}
      fail-fast: false
    steps:
      - name: Skip unchecked EC2s
        if: matrix.deploy != 'true'
        run: echo "Skipping ${{ matrix.instance }} for this run"
      - uses: actions/checkout@v4
        if: matrix.deploy == 'true'
        with:
          ref: ${{ github.event.inputs.branch }}
      - name: Build feature branch
        if: matrix.deploy == 'true'
        run: |
          branch="${{ github.event.inputs.branch }}"
          safe_branch=$(echo "$branch" | tr '/' '-')
          go mod tidy
          mkdir -p build/${safe_branch}/static
          go build -o build/${safe_branch}/app-${safe_branch} main.go
          cp static/index.html build/${safe_branch}/static/index.html
      - name: Prepare deploy folder
        if: matrix.deploy == 'true'
        run: |
          branch="${{ github.event.inputs.branch }}"
          safe_branch=$(echo "$branch" | tr '/' '-')
          mkdir -p deploy/${safe_branch}
          mv build/${safe_branch}/* deploy/${safe_branch}/
      - name: Set safe_branch output
        if: matrix.deploy == 'true'
        id: prepare
        run: |
          branch="${{ github.event.inputs.branch }}"
          safe_branch=$(echo "$branch" | tr '/' '-')
          echo "safe_branch=$safe_branch" >> $GITHUB_OUTPUT
      - name: Upload to EC2
        if: matrix.deploy == 'true'
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          source: "deploy/${{ steps.prepare.outputs.safe_branch }}/*"
          target: "/home/ec2-user/app/${{ steps.prepare.outputs.safe_branch }}/"
          strip_components: 2
      - name: Verify uploaded binary and database connection
        if: matrix.deploy == 'true'
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            branch="${{ github.event.inputs.branch }}"
            safe_branch=$(echo "$branch" | tr '/' '-')
            ls -lR /home/ec2-user/app/
            chmod +x /home/ec2-user/app/${safe_branch}/app-${safe_branch} || echo "Binary not found in expected path"
            export DB_HOST="${{ secrets[format('{0}_DB_HOST', matrix.instance)] }}"
            export DB_NAME="${{ secrets[format('{0}_DB_NAME', matrix.instance)] }}"
            export DB_USER="${{ secrets[format('{0}_DB_USER', matrix.instance)] }}"
            export DB_PASSWORD="${{ secrets[format('{0}_DB_PASSWORD', matrix.instance)] }}"
            export DB_SSLMODE="require"
            export PORT="8081"
            echo "Environment variables: PORT=$PORT, DB_HOST=$DB_HOST, DB_NAME=$DB_NAME, DB_USER=$DB_USER, DB_SSLMODE=$DB_SSLMODE"
            psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME" -c "SELECT 1" || echo "Database connection failed: $?"
            /home/ec2-user/app/${safe_branch}/app-${safe_branch} --version || echo "Failed to run binary: $?"
      - name: Update Nginx configuration
        if: matrix.deploy == 'true'
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            branch="${{ github.event.inputs.branch }}"
            safe_branch=$(echo "$branch" | tr '/' '-')
            nginx_location="/test/$branch"
            # Create a unique nginx config file for this branch to avoid conflicts
            sudo bash -c "cat > /etc/nginx/conf.d/location-tracker-${safe_branch}.conf <<EOF
            location ${nginx_location} {
                proxy_pass http://127.0.0.1:8081;
                proxy_set_header Host \\\$host;
                proxy_set_header X-Real-IP \\\$remote_addr;
                proxy_set_header X-Forwarded-For \\\$proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto \\\$scheme;
            }
            EOF"
            sudo nginx -t && sudo systemctl reload nginx || echo "Failed to reload Nginx"
      - name: Update and restart service
        if: matrix.deploy == 'true'
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            branch="${{ github.event.inputs.branch }}"
            safe_branch=$(echo "$branch" | tr '/' '-')
            sudo bash -c "cat > /etc/systemd/system/location-tracker@\${safe_branch}.service <<EOF
            [Unit]
            Description=Location Tracker (%i)
            After=network.target

            [Service]
            ExecStart=/home/ec2-user/app/%i/app-%i
            Restart=always
            User=ec2-user
            WorkingDirectory=/home/ec2-user/app/%i
            Environment=DB_HOST=${{ secrets[format('{0}_DB_HOST', matrix.instance)] }}
            Environment=DB_NAME=${{ secrets[format('{0}_DB_NAME', matrix.instance)] }}
            Environment=DB_USER=${{ secrets[format('{0}_DB_USER', matrix.instance)] }}
            Environment=DB_PASSWORD=${{ secrets[format('{0}_DB_PASSWORD', matrix.instance)] }}
            Environment=DB_SSLMODE=require
            Environment=PORT=8081

            [Install]
            WantedBy=multi-user.target
            EOF"
            sudo chmod 644 /etc/systemd/system/location-tracker@${safe_branch}.service
            sudo systemctl daemon-reload
            sudo systemctl restart location-tracker@${safe_branch}
            sudo systemctl enable location-tracker@${safe_branch}
            # Verify service status and logs
            sudo systemctl status location-tracker@${safe_branch} --no-pager -l
            echo "Service environment:"
            sudo systemctl show location-tracker@${safe_branch} --property=Environment
            # Wait a moment and check if service is running
            sleep 5
            if sudo systemctl is-active location-tracker@${safe_branch} >/dev/null; then
              echo "Service is running successfully"
            else
              echo "Service failed to start, checking logs:"
              sudo journalctl -u location-tracker@${safe_branch} --no-pager -l
            fi