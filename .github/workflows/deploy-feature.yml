name: Deploy Feature Branch

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Feature branch to deploy"
        required: true
        type: string
      deploy_to_EC2_1:
        description: "Deploy to EC2_1"
        type: boolean
        default: false
      deploy_to_EC2_2:
        description: "Deploy to EC2_2"
        type: boolean
        default: false
      deploy_to_EC2_3:
        description: "Deploy to EC2_3"
        type: boolean
        default: false
      deploy_to_EC2_4:
        description: "Deploy to EC2_4"
        type: boolean
        default: false

jobs:
  deploy-feature:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - instance: EC2_1
            deploy: ${{ github.event.inputs.deploy_to_EC2_1 }}
          - instance: EC2_2
            deploy: ${{ github.event.inputs.deploy_to_EC2_2 }}
          - instance: EC2_3
            deploy: ${{ github.event.inputs.deploy_to_EC2_3 }}
          - instance: EC2_4
            deploy: ${{ github.event.inputs.deploy_to_EC2_4 }}
      fail-fast: false
    steps:
      - name: Skip unchecked instances
        if: matrix.deploy != 'true'
        run: echo "Skipping ${{ matrix.instance }} - not selected for deployment"

      - name: Cleanup feature branch deployment
        if: matrix.deploy == 'true'
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            branch="${{ github.event.inputs.branch }}"
            safe_branch="${{ steps.prepare.outputs.safe_branch }}"
            container_name="location-tracker-${safe_branch}"
            nginx_location="/test/$branch"
            
            echo "=== Cleaning up feature branch deployment: $branch ==="
            echo "Container name: $container_name"
            echo "Nginx location: $nginx_location"
            
            # Stop and remove feature container
            echo "Stopping and removing Docker container..."
            if docker ps -a --format '{{.Names}}' | grep -q "^${container_name}$"; then
              echo "Found container: $container_name"
              docker stop $container_name || echo "Container was not running"
              docker rm -f $container_name || echo "Failed to remove container"
              echo "Container removed successfully"
            else
              echo "Container $container_name not found (already cleaned up)"
            fi
            
            # Remove feature image
            echo "Removing Docker image..."
            if docker images --format '{{.Repository}}:{{.Tag}}' | grep -q "^location-tracker:${safe_branch}$"; then
              echo "Found image: location-tracker:${safe_branch}"
              docker rmi -f location-tracker:${safe_branch} || echo "Failed to remove image"
              echo "Image removed successfully"
            else
              echo "Image location-tracker:${safe_branch} not found (already cleaned up)"
            fi
            
            # Clean up any leftover tar files
            echo "Cleaning up temporary files..."
            rm -f /tmp/location-tracker-${safe_branch}.tar || echo "No tar file to clean up"
            
            # Remove the modular nginx configuration file
            echo "Removing nginx configuration file..."
            sudo rm -f /etc/nginx/conf.d/location-tracker/feature-${safe_branch}.conf
            echo "Feature branch nginx configuration removed"
            
            # Reload nginx to apply changes
            if sudo nginx -t; then
              sudo systemctl reload nginx
              echo "‚úÖ Nginx configuration reloaded after cleanup"
            else
              echo "WARNING: Nginx configuration test failed after cleanup"
              sudo nginx -t
            fi
            
            # Check if port 8082 is still in use
            echo "Checking if port 8082 is still in use..."
            if sudo lsof -i :8082 2>/dev/null; then
              echo "WARNING: Port 8082 still in use by:"
              sudo lsof -i :8082
              echo "Attempting to terminate processes..."
              sudo lsof -i :8082 | awk 'NR>1 {print $2}' | xargs -r sudo kill -9 || echo "Failed to terminate some processes"
            else
              echo "‚úÖ Port 8082 is now free"
            fi
            
            # Check if port 5053 is still in use
            echo "Checking if port 5053 is still in use..."
            if sudo lsof -i :5053 2>/dev/null; then
              echo "WARNING: Port 5053 still in use by:"
              sudo lsof -i :5053
              echo "Attempting to terminate processes..."
              sudo lsof -i :5053 | awk 'NR>1 {print $2}' | xargs -r sudo kill -9 || echo "Failed to terminate some processes"
            else
              echo "‚úÖ Port 5053 is now free"
            fi
            
            # Clean up database entries for this instance if possible
            echo "Checking for database cleanup opportunities..."
            if docker ps --format '{{.Names}}' | grep -q "^location-tracker-main$"; then
              echo "Main container is running, attempting to clean leader election entries..."
              # Try to remove any stale leader election entries for this instance
              main_container_id=$(docker ps --format '{{.ID}}' --filter "name=location-tracker-main")
              if [ ! -z "$main_container_id" ]; then
                docker exec $main_container_id sh -c '
                  if command -v psql >/dev/null; then
                    echo "Cleaning up potential stale leader election entries..."
                    # Remove any entries older than 1 minute (they should be refreshed every 5 seconds)
                    PGPASSWORD="$DB_PASSWORD" psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME" -c "DELETE FROM leader_election WHERE last_heartbeat < NOW() - INTERVAL '\''1 minute'\'';" || echo "Could not clean leader election table"
                  fi
                ' || echo "Could not access database for cleanup"
              fi
            else
              echo "Main container not running, skipping database cleanup"
            fi
            
            echo "=== Cleanup Summary ==="
            echo "‚úÖ Docker container stopped and removed"
            echo "‚úÖ Docker image removed"
            echo "‚úÖ Nginx configuration file removed"
            echo "‚úÖ Ports freed"
            echo "‚úÖ Temporary files cleaned"
            echo ""
            echo "Feature branch '$branch' has been completely cleaned up from ${{ matrix.instance }}"
            echo "Configuration is ready for future deploy-feature runs"
            
            # Show current running containers
            echo "=== Current Running Location Tracker Containers ==="
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep location-tracker || echo "No location tracker containers running"

      - uses: actions/checkout@v4
        if: matrix.deploy == 'true'
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Set safe branch name and instance info
        if: matrix.deploy == 'true'
        id: prepare
        run: |
          branch="${{ github.event.inputs.branch }}"
          safe_branch=$(echo "$branch" | tr '/' '-' | tr '[:upper:]' '[:lower:]')
          echo "safe_branch=$safe_branch" >> $GITHUB_OUTPUT
          echo "Branch: $branch -> Safe: $safe_branch"
          echo "Instance: ${{ matrix.instance }}"

      - name: Modify HTML with instance name
        if: matrix.deploy == 'true'
        run: |
          instance_name="${{ secrets[format('{0}_PAGE_NAME', matrix.instance)] }}"
          branch="${{ github.event.inputs.branch }}"
          
          # Default to matrix.instance if secret is not set
          if [ -z "$instance_name" ]; then
            instance_name="${{ matrix.instance }}"
          fi
          
          echo "Using instance name: $instance_name"
          echo "Branch: $branch"

          ls
          
          # Modify the HTML title to include instance name and branch
          sed -i "s|<title>Real-time Location Tracker</title>|<title>Real-time Location Tracker - $instance_name ($branch)</title>|g" ./static/index.html
          
          # Also update the h1 header to show the instance
          sed -i "s|<h1>üåç Real-time Location Tracker</h1>|<h1>üåç Real-time Location Tracker - $instance_name</h1>|g" ./static/index.html
          
          echo "HTML modifications completed"

      - name: Build Docker image
        if: matrix.deploy == 'true'
        run: |
          branch="${{ github.event.inputs.branch }}"
          safe_branch="${{ steps.prepare.outputs.safe_branch }}"
          base_path="/test/$branch"
          echo "Building Docker image for branch: $branch with BASE_PATH: $base_path"
          docker build \
            --build-arg VERSION=${safe_branch}-$(git rev-parse --short HEAD) \
            --build-arg BASE_PATH="$base_path" \
            -t location-tracker:${safe_branch} \
            .
          docker save location-tracker:${safe_branch} > location-tracker-${safe_branch}.tar
          echo "Docker image saved: location-tracker-${safe_branch}.tar"

      - name: Stop existing feature container
        if: matrix.deploy == 'true'
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            safe_branch="${{ steps.prepare.outputs.safe_branch }}"
            container_name="location-tracker-${safe_branch}"
            echo "Cleaning up existing feature deployment: $container_name"
            
            # Stop and remove existing feature container
            if docker ps -a --format '{{.Names}}' | grep -q "^${container_name}$"; then
              echo "Stopping existing container: $container_name"
              docker stop $container_name || echo "Container was not running"
              docker rm $container_name || echo "Failed to remove container"
            fi
            
            # Remove existing feature image
            if docker images --format '{{.Repository}}:{{.Tag}}' | grep -q "^location-tracker:${safe_branch}$"; then
              echo "Removing old image: location-tracker:${safe_branch}"
              docker rmi location-tracker:${safe_branch} || echo "Failed to remove image"
            fi
            
            # Check for and free port 8082 (feature port)
            if sudo lsof -i :8082 2>/dev/null; then
              echo "Found processes using port 8082, attempting to terminate..."
              sudo lsof -i :8082 | awk 'NR>1 {print $2}' | xargs -r sudo kill -9 || echo "Failed to terminate some processes"
              sleep 2
            fi
            
            mkdir -p /home/ec2-user/certs
            echo "Feature cleanup completed"

      - name: Upload Docker image
        if: matrix.deploy == 'true'
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          source: location-tracker-${{ steps.prepare.outputs.safe_branch }}.tar
          target: /tmp/

      - name: Deploy SSL certificates
        if: matrix.deploy == 'true'
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            mkdir -p /home/ec2-user/certs
            if [ -n "${{ secrets[format('{0}_SSL_CERT', matrix.instance)] }}" ]; then
              echo "Deploying SSL certificate for feature branch..."
              echo "${{ secrets[format('{0}_SSL_CERT', matrix.instance)] }}" > /home/ec2-user/certs/server.crt
              chmod 644 /home/ec2-user/certs/server.crt
            fi
            if [ -n "${{ secrets[format('{0}_SSL_KEY', matrix.instance)] }}" ]; then
              echo "Deploying SSL private key for feature branch..."
              echo "${{ secrets[format('{0}_SSL_KEY', matrix.instance)] }}" > /home/ec2-user/certs/server.key
              chmod 600 /home/ec2-user/certs/server.key
            fi

      - name: Update modular Nginx configuration with feature branch
        if: matrix.deploy == 'true'
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            branch="${{ github.event.inputs.branch }}"
            safe_branch="${{ steps.prepare.outputs.safe_branch }}"
            nginx_location="/test/$branch"
            
            echo "Creating modular configuration for feature branch: $branch"
            echo "Safe branch name: $safe_branch"
            echo "Nginx location: $nginx_location"
            
            # Ensure the modular configuration directory exists
            sudo mkdir -p /etc/nginx/conf.d/location-tracker
            
            # Remove any existing feature configuration for this branch
            sudo rm -f /etc/nginx/conf.d/location-tracker/feature-${safe_branch}.conf
            
            # Create feature branch configuration file
            cat > /tmp/feature-${safe_branch}.conf << EOF
            # Configuration for feature branch: $branch
            location $nginx_location/ {
                proxy_pass http://127.0.0.1:8082/;
                proxy_http_version 1.1;
                proxy_set_header Upgrade \$http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host \$host;
                proxy_set_header X-Real-IP \$remote_addr;
                proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto \$scheme;
                proxy_cache_bypass \$http_upgrade;
            }

            location $nginx_location/ws {
                proxy_pass http://127.0.0.1:8082/ws;
                proxy_http_version 1.1;
                proxy_set_header Upgrade \$http_upgrade;
                proxy_set_header Connection "Upgrade";
                proxy_set_header Host \$host;
                proxy_set_header X-Real-IP \$remote_addr;
                proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto \$scheme;
            }
            EOF
            
            # Move the configuration to the nginx directory
            sudo mv /tmp/feature-${safe_branch}.conf /etc/nginx/conf.d/location-tracker/feature-${safe_branch}.conf
            
            # Test configuration
            echo "Testing nginx configuration..."
            if sudo nginx -t; then
              echo "Nginx configuration test passed"
              sudo systemctl reload nginx
              echo "Feature branch configuration added successfully"
              
              # Verify the configuration was applied
              echo "Verifying configuration contains feature branch:"
              if sudo test -f /etc/nginx/conf.d/location-tracker/feature-${safe_branch}.conf; then
                echo "‚úÖ Feature branch configuration file created"
                sudo ls -la /etc/nginx/conf.d/location-tracker/feature-*.conf
              else
                echo "‚ùå Feature branch configuration file NOT found"
              fi
            else
              echo "ERROR: Nginx configuration test failed"
              sudo nginx -t
              exit 1
            fi

      - name: Load and start Docker container
        if: matrix.deploy == 'true'
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            branch="${{ github.event.inputs.branch }}"
            safe_branch="${{ steps.prepare.outputs.safe_branch }}"
            container_name="location-tracker-${safe_branch}"
            echo "Loading and starting Docker container: $container_name"
            
            if [ -f "/tmp/location-tracker-${safe_branch}.tar" ]; then
              echo "Loading Docker image from tar file..."
              docker load < /tmp/location-tracker-${safe_branch}.tar
            else
              echo "ERROR: Docker image tar file not found"
              exit 1
            fi
            
            echo "Starting Docker container..."
            docker run -d \
              --name $container_name \
              --restart unless-stopped \
              -p 8082:8080 \
              -p 5053:5053/udp \
              -e DB_HOST="${{ secrets[format('{0}_DB_HOST', matrix.instance)] }}" \
              -e DB_NAME="${{ secrets[format('{0}_DB_NAME', matrix.instance)] }}" \
              -e DB_USER="${{ secrets[format('{0}_DB_USER', matrix.instance)] }}" \
              -e DB_PASSWORD="${{ secrets[format('{0}_DB_PASSWORD', matrix.instance)] }}" \
              -e DB_SSLMODE=require \
              -e PORT=8080 \
              -e UDP_PORT=5053 \
              -e DOMAIN="${{ secrets[format('{0}_DOMAIN', matrix.instance)] }}" \
              -e AUTO_TLS=false \
              -e DISABLE_TLS=true \
              -e BASE_PATH="/test/$branch" \
              location-tracker:${safe_branch}
            
            echo "Waiting for container to start..."
            sleep 30
            
            if docker ps --format '{{.Names}}' | grep -q "^${container_name}$"; then
              echo "Container started successfully: $container_name"
            else
              echo "ERROR: Container failed to start"
              docker logs $container_name
              exit 1
            fi
            
            rm -f /tmp/location-tracker-${safe_branch}.tar

      - name: Health check and verification
        if: matrix.deploy == 'true'
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            branch="${{ github.event.inputs.branch }}"
            safe_branch="${{ steps.prepare.outputs.safe_branch }}"
            container_name="location-tracker-${safe_branch}"
            instance_name="${{ secrets[format('{0}_INSTANCE_NAME', matrix.instance)] }}"
            
            # Default to matrix.instance if secret is not set
            if [ -z "$instance_name" ]; then
              instance_name="${{ matrix.instance }}"
            fi
            
            echo "=== Final Health Check ==="
            echo "Instance: $instance_name"
            echo "Feature branch: $branch"
            echo "Container: $container_name"
            
            max_attempts=5
            attempt=1
            while [ $attempt -le $max_attempts ]; do
              echo "Health check attempt $attempt/$max_attempts..."
              if curl -f -s http://localhost:8082/api/health; then
                echo "Health check PASSED"
                echo "=== Feature Branch Deployment Successful ==="
                echo "Instance: $instance_name"
                echo "Feature branch: $branch"
                echo "Container: $container_name"
                if [ -f /etc/ssl/certs/location-tracker.crt ]; then
                  echo "Public URL: https://${{ secrets[format('{0}_DOMAIN', matrix.instance)] }}/test/$branch"
                else
                  echo "Public URL: http://${{ secrets[format('{0}_DOMAIN', matrix.instance)] }}/test/$branch"
                fi
                exit 0
              else
                echo "Health check failed (attempt $attempt/$max_attempts)"
                if [ $attempt -lt $max_attempts ]; then
                  sleep 10
                fi
              fi
              attempt=$((attempt + 1))
            done
            
            echo "ERROR: All health checks failed"
            docker logs --tail 50 $container_name
            exit 1