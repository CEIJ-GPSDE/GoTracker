name: Deploy Feature Branch

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Feature branch to deploy"
        required: true
        type: string
      deploy_to_EC2_1:
        description: "Deploy to EC2_1"
        type: boolean
        default: false
      deploy_to_EC2_2:
        description: "Deploy to EC2_2"
        type: boolean
        default: false
      deploy_to_EC2_3:
        description: "Deploy to EC2_3"
        type: boolean
        default: false
      deploy_to_EC2_4:
        description: "Deploy to EC2_4"
        type: boolean
        default: false

jobs:
  deploy-feature:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - instance: EC2_1
            deploy: ${{ github.event.inputs.deploy_to_EC2_1 }}
          - instance: EC2_2
            deploy: ${{ github.event.inputs.deploy_to_EC2_2 }}
          - instance: EC2_3
            deploy: ${{ github.event.inputs.deploy_to_EC2_3 }}
          - instance: EC2_4
            deploy: ${{ github.event.inputs.deploy_to_EC2_4 }}
      fail-fast: false
    steps:
      - name: Skip unchecked instances
        if: matrix.deploy != 'true'
        run: echo "Skipping ${{ matrix.instance }} - not selected for deployment"

      - uses: actions/checkout@v4
        if: matrix.deploy == 'true'
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Set safe branch name and instance info
        if: matrix.deploy == 'true'
        id: prepare
        run: |
          branch="${{ github.event.inputs.branch }}"
          safe_branch=$(echo "$branch" | tr '/' '-' | tr '[:upper:]' '[:lower:]')
          echo "safe_branch=$safe_branch" >> $GITHUB_OUTPUT
          echo "Branch: $branch -> Safe: $safe_branch"
          echo "Instance: ${{ matrix.instance }}"

      - name: Modify HTML with instance name
        if: matrix.deploy == 'true'
        run: |
          instance_name="${{ secrets[format('{0}_DOMAIN', matrix.instance)] }}"
          branch="${{ github.event.inputs.branch }}"
          
          # Default to matrix.instance if secret is not set
          if [ -z "$instance_name" ]; then
            instance_name="${{ matrix.instance }}"
          fi
          
          echo "Using instance name: $instance_name"
          echo "Branch: $branch"

          ls
          
          # Modify the HTML title to include instance name and branch
          sed -i "s|<title>Real-time Location Tracker</title>|<title>Real-time Location Tracker - $instance_name ($branch)</title>|g" ./static/index.html
          
          # Also update the h1 header to show the instance
          sed -i "s|<h1>üåç Real-time Location Tracker</h1>|<h1>üåç Real-time Location Tracker - $instance_name</h1>|g" ./static/index.html
          
          echo "HTML modifications completed"

      - name: Build Docker image
        if: matrix.deploy == 'true'
        run: |
          branch="${{ github.event.inputs.branch }}"
          safe_branch="${{ steps.prepare.outputs.safe_branch }}"
          base_path="/test/$branch"
          echo "Building Docker image for branch: $branch with BASE_PATH: $base_path"
          docker build \
            --build-arg VERSION=${safe_branch}-$(git rev-parse --short HEAD) \
            --build-arg BASE_PATH="$base_path" \
            -t location-tracker:${safe_branch} \
            .
          docker save location-tracker:${safe_branch} > location-tracker-${safe_branch}.tar
          echo "Docker image saved: location-tracker-${safe_branch}.tar"

      - name: Stop existing feature container
        if: matrix.deploy == 'true'
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            safe_branch="${{ steps.prepare.outputs.safe_branch }}"
            container_name="location-tracker-${safe_branch}"
            echo "Cleaning up existing feature deployment: $container_name"
            
            # Stop and remove existing feature container
            if docker ps -a --format '{{.Names}}' | grep -q "^${container_name}$"; then
              echo "Stopping existing container: $container_name"
              docker stop $container_name || echo "Container was not running"
              docker rm $container_name || echo "Failed to remove container"
            fi
            
            # Remove existing feature image
            if docker images --format '{{.Repository}}:{{.Tag}}' | grep -q "^location-tracker:${safe_branch}$"; then
              echo "Removing old image: location-tracker:${safe_branch}"
              docker rmi location-tracker:${safe_branch} || echo "Failed to remove image"
            fi
            
            # Check for and free port 8081
            if sudo lsof -i :8081 2>/dev/null; then
              echo "Found processes using port 8081, attempting to terminate..."
              sudo lsof -i :8081 | awk 'NR>1 {print $2}' | xargs -r sudo kill -9 || echo "Failed to terminate some processes"
              sleep 2
            fi
            
            mkdir -p /home/ec2-user/certs
            echo "Feature cleanup completed"

      - name: Upload Docker image
        if: matrix.deploy == 'true'
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          source: location-tracker-${{ steps.prepare.outputs.safe_branch }}.tar
          target: /tmp/

      - name: Deploy SSL certificates
        if: matrix.deploy == 'true'
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            mkdir -p /home/ec2-user/certs
            if [ -n "${{ secrets[format('{0}_SSL_CERT', matrix.instance)] }}" ]; then
              echo "Deploying SSL certificate for feature branch..."
              echo "${{ secrets[format('{0}_SSL_CERT', matrix.instance)] }}" > /home/ec2-user/certs/server.crt
              chmod 644 /home/ec2-user/certs/server.crt
            fi
            if [ -n "${{ secrets[format('{0}_SSL_KEY', matrix.instance)] }}" ]; then
              echo "Deploying SSL private key for feature branch..."
              echo "${{ secrets[format('{0}_SSL_KEY', matrix.instance)] }}" > /home/ec2-user/certs/server.key
              chmod 600 /home/ec2-user/certs/server.key
            fi

      - name: Update unified Nginx configuration with feature branch
        if: matrix.deploy == 'true'
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            branch="${{ github.event.inputs.branch }}"
            safe_branch="${{ steps.prepare.outputs.safe_branch }}"
            domain="${{ secrets[format('{0}_DOMAIN', matrix.instance)] }}"
            nginx_location="/test/$branch"
            
            echo "Adding feature branch to unified Nginx configuration: $branch"
            echo "Safe branch name: $safe_branch"
            echo "Nginx location: $nginx_location"
            
            # Backup existing configuration
            sudo cp /etc/nginx/conf.d/location-tracker-unified.conf /etc/nginx/conf.d/location-tracker-unified.conf.backup
            
            # Check if unified config exists, if not create basic one
            if [ ! -f "/etc/nginx/conf.d/location-tracker-unified.conf" ]; then
              echo "Creating basic unified configuration..."
              sudo tee /etc/nginx/conf.d/location-tracker-unified.conf > /dev/null <<'EOF'
            # Unified configuration for main and feature branches
            server {
                listen 80;
                server_name DOMAIN_PLACEHOLDER;
                
                # Main application (root path)
                location / {
                    if (-f /etc/ssl/certs/location-tracker.crt) {
                        return 301 https://$server_name$request_uri;
                    }
                    proxy_pass http://127.0.0.1:8080;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_cache_bypass $http_upgrade;
                }
                
                # WebSocket for main app
                location /ws {
                    if (-f /etc/ssl/certs/location-tracker.crt) {
                        return 301 https://$server_name$request_uri;
                    }
                    proxy_pass http://127.0.0.1:8080/ws;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "Upgrade";
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                }
            
                # FEATURE_LOCATIONS_HTTP_PLACEHOLDER
            }
            
            # HTTPS server block
            server {
                listen 443 ssl;
                http2 on;
                server_name DOMAIN_PLACEHOLDER;
                
                ssl_certificate /etc/ssl/certs/location-tracker.crt;
                ssl_certificate_key /etc/ssl/private/location-tracker.key;
                ssl_protocols TLSv1.2 TLSv1.3;
                ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
                ssl_prefer_server_ciphers off;
                ssl_session_cache shared:SSL:10m;
                ssl_session_timeout 10m;
                
                add_header X-Frame-Options DENY;
                add_header X-Content-Type-Options nosniff;
                add_header X-XSS-Protection "1; mode=block";
                add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";
                add_header Referrer-Policy "strict-origin-when-cross-origin";
                
                # Main application (root path)
                location / {
                    proxy_pass http://127.0.0.1:8080;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host $host;
                    proxy_Set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_cache_bypass $http_upgrade;
                }
                
                # WebSocket for main app
                location /ws {
                    proxy_pass http://127.0.0.1:8080/ws;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "Upgrade";
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                }
                
                # FEATURE_LOCATIONS_HTTPS_PLACEHOLDER
            }
            EOF
              # Replace domain placeholder
              sudo sed -i "s/DOMAIN_PLACEHOLDER/$domain/g" /etc/nginx/conf.d/location-tracker-unified.conf
            fi
            
            # Remove any existing feature location blocks for this specific branch
            echo "Removing existing configuration for branch: $nginx_location"
            sudo sed -i "/# Feature branch.*$(echo "$nginx_location" | sed 's/[[\.*^$(){}?+|/]/\\&/g')/,/# End feature branch.*$(echo "$nginx_location" | sed 's/[[\.*^$(){}?+|/]/\\&/g')/d" /etc/nginx/conf.d/location-tracker-unified.conf
            sudo sed -i "/# Feature branch HTTPS.*$(echo "$nginx_location" | sed 's/[[\.*^$(){}?+|/]/\\&/g')/,/# End feature branch HTTPS.*$(echo "$nginx_location" | sed 's/[[\.*^$(){}?+|/]/\\&/g')/d" /etc/nginx/conf.d/location-tracker-unified.conf
            
            # Create feature location blocks
            cat > /tmp/feature_locations.conf <<EOF
                # Feature branch $nginx_location
                location $nginx_location/ {
                    if (-f /etc/ssl/certs/location-tracker.crt) {
                        return 301 https://\$server_name\$request_uri;
                    }
                    proxy_pass http://127.0.0.1:8081/;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                    proxy_cache_bypass \$http_upgrade;
                }
                
                location $nginx_location/ws {
                    if (-f /etc/ssl/certs/location-tracker.crt) {
                        return 301 https://\$server_name\$request_uri;
                    }
                    proxy_pass http://127.0.0.1:8081/ws;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection "Upgrade";
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_Set_header X-Forwarded-Proto \$scheme;
                }
                # End feature branch $nginx_location
            EOF
            
            cat > /tmp/feature_locations_https.conf <<EOF
                # Feature branch HTTPS $nginx_location
                location $nginx_location/ {
                    proxy_pass http://127.0.0.1:8081/;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                    proxy_cache_bypass \$http_upgrade;
                }
                
                location $nginx_location/ws {
                    proxy_pass http://127.0.0.1:8081/ws;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection "Upgrade";
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }
                # End feature branch HTTPS $nginx_location
            EOF
            
            # Use Python to safely insert the location blocks
            python3 << 'PYTHON_SCRIPT'
            import re
            import sys
            
            # Read the nginx config
            with open('/etc/nginx/conf.d/location-tracker-unified.conf', 'r') as f:
                content = f.read()
            
            # Read the feature location blocks
            with open('/tmp/feature_locations.conf', 'r') as f:
                http_block = f.read()
            
            with open('/tmp/feature_locations_https.conf', 'r') as f:
                https_block = f.read()
            
            # Replace HTTP placeholder or insert before closing brace of first server block
            if '# FEATURE_LOCATIONS_HTTP_PLACEHOLDER' in content:
                content = content.replace('# FEATURE_LOCATIONS_HTTP_PLACEHOLDER', http_block.strip())
            else:
                # Find the first server block (HTTP) and insert before its closing brace
                pattern = r'(server\s*\{[^}]*listen\s+80[^}]*?)(\s*})(?=\s*(?:#.*?HTTPS|server\s*\{[^}]*listen\s+443|$))'
                replacement = r'\1' + '\n' + http_block.rstrip() + r'\2'
                content = re.sub(pattern, replacement, content, count=1, flags=re.MULTILINE | re.DOTALL)
            
            # Replace HTTPS placeholder or insert before closing brace of HTTPS server block
            if '# FEATURE_LOCATIONS_HTTPS_PLACEHOLDER' in content:
                content = content.replace('# FEATURE_LOCATIONS_HTTPS_PLACEHOLDER', https_block.strip())
            else:
                # Find the HTTPS server block and insert before its closing brace
                pattern = r'(server\s*\{[^}]*listen\s+443[^}]*?)(\s*})(?=\s*$)'
                replacement = r'\1' + '\n' + https_block.rstrip() + r'\2'
                content = re.sub(pattern, replacement, content, count=1, flags=re.MULTILINE | re.DOTALL)
            
            # Write back the modified content
            with open('/etc/nginx/conf.d/location-tracker-unified.conf', 'w') as f:
                f.write(content)
            
            print("Configuration updated successfully")
            PYTHON_SCRIPT
            
            # Clean up temporary files
            rm -f /tmp/feature_locations.conf /tmp/feature_locations_https.conf
            
            echo "Feature branch locations added to unified configuration"
            
            # Test configuration
            echo "Testing nginx configuration..."
            if sudo nginx -t; then
              echo "Nginx configuration test passed"
              sudo systemctl reload nginx
              echo "Nginx configuration updated successfully"
              
              # Verify the configuration was applied correctly
              echo "Verifying configuration contains feature branch locations:"
              if sudo grep -q "location $nginx_location/" /etc/nginx/conf.d/location-tracker-unified.conf; then
                echo "‚úÖ Feature branch location blocks found in configuration"
              else
                echo "‚ùå Feature branch location blocks NOT found in configuration"
                echo "Configuration content:"
                sudo cat /etc/nginx/conf.d/location-tracker-unified.conf
              fi
            else
              echo "ERROR: Nginx configuration test failed"
              echo "Configuration file content:"
              sudo cat /etc/nginx/conf.d/location-tracker-unified.conf
              sudo nginx -t
              
              # Restore backup
              echo "Restoring backup configuration..."
              sudo cp /etc/nginx/conf.d/location-tracker-unified.conf.backup /etc/nginx/conf.d/location-tracker-unified.conf
              exit 1
            fi

      - name: Load and start Docker container
        if: matrix.deploy == 'true'
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            branch="${{ github.event.inputs.branch }}"
            safe_branch="${{ steps.prepare.outputs.safe_branch }}"
            container_name="location-tracker-${safe_branch}"
            echo "Loading and starting Docker container: $container_name"
            
            if [ -f "/tmp/location-tracker-${safe_branch}.tar" ]; then
              echo "Loading Docker image from tar file..."
              docker load < /tmp/location-tracker-${safe_branch}.tar
            else
              echo "ERROR: Docker image tar file not found"
              exit 1
            fi
            
            echo "Starting Docker container..."
            docker run -d \
              --name $container_name \
              --restart unless-stopped \
              -p 8081:8080 \
              -p 5052:5052 \
              -e DB_HOST="${{ secrets[format('{0}_DB_HOST', matrix.instance)] }}" \
              -e DB_NAME="${{ secrets[format('{0}_DB_NAME', matrix.instance)] }}" \
              -e DB_USER="${{ secrets[format('{0}_DB_USER', matrix.instance)] }}" \
              -e DB_PASSWORD="${{ secrets[format('{0}_DB_PASSWORD', matrix.instance)] }}" \
              -e DB_SSLMODE=require \
              -e PORT=8080 \
              -e UDP_PORT=5052 \
              -e DOMAIN="${{ secrets[format('{0}_DOMAIN', matrix.instance)] }}" \
              -e AUTO_TLS=false \
              -e DISABLE_TLS=true \
              -e BASE_PATH="/test/$branch" \
              location-tracker:${safe_branch}
            
            echo "Waiting for container to start..."
            sleep 30
            
            if docker ps --format '{{.Names}}' | grep -q "^${container_name}$"; then
              echo "Container started successfully: $container_name"
            else
              echo "ERROR: Container failed to start"
              docker logs $container_name
              exit 1
            fi
            
            rm -f /tmp/location-tracker-${safe_branch}.tar

      - name: Health check and verification
        if: matrix.deploy == 'true'
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            branch="${{ github.event.inputs.branch }}"
            safe_branch="${{ steps.prepare.outputs.safe_branch }}"
            container_name="location-tracker-${safe_branch}"
            instance_name="${{ secrets[format('{0}_INSTANCE_NAME', matrix.instance)] }}"
            
            # Default to matrix.instance if secret is not set
            if [ -z "$instance_name" ]; then
              instance_name="${{ matrix.instance }}"
            fi
            
            echo "=== Final Health Check ==="
            echo "Instance: $instance_name"
            echo "Feature branch: $branch"
            echo "Container: $container_name"
            
            max_attempts=5
            attempt=1
            while [ $attempt -le $max_attempts ]; do
              echo "Health check attempt $attempt/$max_attempts..."
              if curl -f -s http://localhost:8081/api/health; then
                echo "Health check PASSED"
                echo "=== Feature Branch Deployment Successful ==="
                echo "Instance: $instance_name"
                echo "Feature branch: $branch"
                echo "Container: $container_name"
                if [ -f /etc/ssl/certs/location-tracker.crt ]; then
                  echo "Public URL: https://${{ secrets[format('{0}_DOMAIN', matrix.instance)] }}/test/$branch"
                else
                  echo "Public URL: http://${{ secrets[format('{0}_DOMAIN', matrix.instance)] }}/test/$branch"
                fi
                exit 0
              else
                echo "Health check failed (attempt $attempt/$max_attempts)"
                if [ $attempt -lt $max_attempts ]; then
                  sleep 10
                fi
              fi
              attempt=$((attempt + 1))
            done
            
            echo "ERROR: All health checks failed"
            docker logs --tail 50 $container_name
            exit 1