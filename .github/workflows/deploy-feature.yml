name: Deploy Feature Branch

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Feature branch to deploy"
        required: true
        type: string
      deploy_to_EC2_1:
        description: "Deploy to EC2_1"
        type: boolean
        default: false
      deploy_to_EC2_2:
        description: "Deploy to EC2_2"
        type: boolean
        default: false
      deploy_to_EC2_3:
        description: "Deploy to EC2_3"
        type: boolean
        default: false
      deploy_to_EC2_4:
        description: "Deploy to EC2_4"
        type: boolean
        default: false

jobs:
  deploy-feature:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - instance: EC2_1
            deploy: ${{ github.event.inputs.deploy_to_EC2_1 }}
          - instance: EC2_2
            deploy: ${{ github.event.inputs.deploy_to_EC2_2 }}
          - instance: EC2_3
            deploy: ${{ github.event.inputs.deploy_to_EC2_3 }}
          - instance: EC2_4
            deploy: ${{ github.event.inputs.deploy_to_EC2_4 }}
      fail-fast: false
    steps:
      - name: Skip unchecked instances
        if: matrix.deploy != 'true'
        run: echo "Skipping ${{ matrix.instance }} - not selected for deployment"

      - uses: actions/checkout@v4
        if: matrix.deploy == 'true'
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Set safe branch name
        if: matrix.deploy == 'true'
        id: prepare
        run: |
          branch="${{ github.event.inputs.branch }}"
          safe_branch=$(echo "$branch" | tr '/' '-' | tr '[:upper:]' '[:lower:]')
          echo "safe_branch=$safe_branch" >> $GITHUB_OUTPUT
          echo "Branch: $branch -> Safe: $safe_branch"

      - name: Build Docker image
        if: matrix.deploy == 'true'
        run: |
          branch="${{ github.event.inputs.branch }}"
          safe_branch="${{ steps.prepare.outputs.safe_branch }}"
          echo "Building Docker image for branch: $branch"
          docker build \
            --build-arg VERSION=${safe_branch}-$(git rev-parse --short HEAD) \
            -t location-tracker:${safe_branch} \
            .
          docker save location-tracker:${safe_branch} > location-tracker-${safe_branch}.tar
          echo "Docker image saved: location-tracker-${safe_branch}.tar"
          ls -la location-tracker-${safe_branch}.tar

      - name: Stop existing container and cleanup
        if: matrix.deploy == 'true'
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            safe_branch="${{ steps.prepare.outputs.safe_branch }}"
            container_name="location-tracker-${safe_branch}"
            echo "Cleaning up existing deployment: $container_name"
            if docker ps -a --format '{{.Names}}' | grep -q "^${container_name}$"; then
              echo "Stopping existing container: $container_name"
              docker stop $container_name || echo "Container was not running"
              docker rm $container_name || echo "Failed to remove container"
            else
              echo "No existing container found: $container_name"
            fi
            if docker images --format '{{.Repository}}:{{.Tag}}' | grep -q "^location-tracker:${safe_branch}$"; then
              echo "Removing old image: location-tracker:${safe_branch}"
              docker rmi location-tracker:${safe_branch} || echo "Failed to remove image"
            fi
            mkdir -p /home/ec2-user/certs
            echo "Cleanup completed"

      - name: Upload Docker image
        if: matrix.deploy == 'true'
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          source: location-tracker-${{ steps.prepare.outputs.safe_branch }}.tar
          target: /tmp/

      - name: Deploy SSL certificates
        if: matrix.deploy == 'true'
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            mkdir -p /home/ec2-user/certs
            if [ -n "${{ secrets[format('{0}_SSL_CERT', matrix.instance)] }}" ]; then
              echo "Deploying SSL certificate for feature branch..."
              echo "${{ secrets[format('{0}_SSL_CERT', matrix.instance)] }}" > /home/ec2-user/certs/server.crt
              chmod 644 /home/ec2-user/certs/server.crt
            else
              echo "No SSL certificate provided"
            fi
            if [ -n "${{ secrets[format('{0}_SSL_KEY', matrix.instance)] }}" ]; then
              echo "Deploying SSL private key for feature branch..."
              echo "${{ secrets[format('{0}_SSL_KEY', matrix.instance)] }}" > /home/ec2-user/certs/server.key
              chmod 600 /home/ec2-user/certs/server.key
            else
              echo "No SSL private key provided"
            fi
            echo "SSL certificate deployment completed"

      - name: Update Nginx configuration
        if: matrix.deploy == 'true'
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            branch="${{ github.event.inputs.branch }}"
            safe_branch="${{ steps.prepare.outputs.safe_branch }}"
            domain="${{ secrets[format('{0}_DOMAIN', matrix.instance)] }}"
            nginx_location="/test/$branch"
            echo "Adding Nginx configuration for feature branch: $branch"
            echo "Safe branch name: $safe_branch"
            echo "Nginx location: $nginx_location"
            sudo cp /etc/nginx/conf.d/location-tracker-main.conf /tmp/nginx-main-backup-$safe_branch.conf
            if [ ! -f /etc/nginx/conf.d/location-tracker-main.conf ]; then
              echo "ERROR: Main nginx configuration not found. Deploy main branch first."
              exit 1
            fi
            # Remove existing feature branch configuration
            sudo sed -i "/# Feature branch: $safe_branch/,/# End feature branch: $safe_branch/ { d; }" /etc/nginx/conf.d/location-tracker-main.conf
            # Add HTTP configuration for feature branch
            sudo tee -a /etc/nginx/conf.d/location-tracker-main.conf > /dev/null <<'EOF'
            # Feature branch: SAFE_BRANCH
            server {
                listen 80;
                server_name DOMAIN;

                location NGINX_LOCATION/ {
                    proxy_pass http://127.0.0.1:8081/;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_cache_bypass $http_upgrade;
                }

                location NGINX_LOCATION/ws {
                    proxy_pass http://127.0.0.1:8081/ws;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "Upgrade";
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                }

                # Redirect feature branch to HTTPS if certificates exist
                if (-f /etc/ssl/certs/location-tracker.crt) {
                    return 301 https://$server_name$request_uri;
                }
            }
            # End feature branch: SAFE_BRANCH
EOF
            # Replace placeholders with actual values
            sudo sed -i "s|SAFE_BRANCH|$safe_branch|g" /etc/nginx/conf.d/location-tracker-main.conf
            sudo sed -i "s|DOMAIN|$domain|g" /etc/nginx/conf.d/location-tracker-main.conf
            sudo sed -i "s|NGINX_LOCATION|$nginx_location|g" /etc/nginx/conf.d/location-tracker-main.conf
            # Add HTTPS server block if certificates exist
            if [ -f /etc/ssl/certs/location-tracker.crt ] && [ -f /etc/ssl/private/location-tracker.key ]; then
              echo "SSL certificates found, configuring HTTPS for feature branch..."
              sudo tee -a /etc/nginx/conf.d/location-tracker-main.conf > /dev/null <<'EOF'
# Feature branch HTTPS: SAFE_BRANCH
server {
    listen 443 ssl http2;
    server_name DOMAIN;

    ssl_certificate /etc/ssl/certs/location-tracker.crt;
    ssl_certificate_key /etc/ssl/private/location-tracker.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";
    add_header Referrer-Policy "strict-origin-when-cross-origin";

    location NGINX_LOCATION/ {
        proxy_pass http://127.0.0.1:8081/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    location NGINX_LOCATION/ws {
        proxy_pass http://127.0.0.1:8081/ws;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
# End feature branch HTTPS: SAFE_BRANCH
EOF
              # Replace placeholders with actual values
              sudo sed -i "s|SAFE_BRANCH|$safe_branch|g" /etc/nginx/conf.d/location-tracker-main.conf
              sudo sed -i "s|DOMAIN|$domain|g" /etc/nginx/conf.d/location-tracker-main.conf
              sudo sed -i "s|NGINX_LOCATION|$nginx_location|g" /etc/nginx/conf.d/location-tracker-main.conf
            fi
            # Verify ports are listening
            echo "Checking listening ports..."
            if sudo netstat -tuln | grep -q ":80 "; then
              echo "Port 80 is listening"
            else
              echo "WARNING: Port 80 is not listening"
            fi
            if [ -f /etc/ssl/certs/location-tracker.crt ] && sudo netstat -tuln | grep -q ":443 "; then
              echo "Port 443 is listening"
            else
              echo "WARNING: Port 443 is not listening (SSL may not be configured)"
            fi
            if sudo netstat -tuln | grep -q ":8081 "; then
              echo "Port 8081 is listening (should be bound by Docker)"
            else
              echo "WARNING: Port 8081 is not listening yet (Docker container will bind after this step)"
            fi
            # Test Nginx configuration
            if sudo nginx -t; then
              echo "Nginx configuration test passed"
              sudo systemctl reload nginx || { echo "ERROR: Failed to reload Nginx"; sudo journalctl -u nginx -n 50 --no-pager; exit 1; }
              echo "Nginx configuration updated successfully"
            else
              echo "ERROR: Nginx configuration test failed"
              echo "Restoring backup..."
              sudo cp /tmp/nginx-main-backup-$safe_branch.conf /etc/nginx/conf.d/location-tracker-main.conf
              sudo nginx -t
              exit 1
            fi

      - name: Load and start Docker container
        if: matrix.deploy == 'true'
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            branch="${{ github.event.inputs.branch }}"
            safe_branch="${{ steps.prepare.outputs.safe_branch }}"
            container_name="location-tracker-${safe_branch}"
            echo "Loading and starting Docker container: $container_name"
            if [ -f "/tmp/location-tracker-${safe_branch}.tar" ]; then
              echo "Loading Docker image from tar file..."
              docker load < /tmp/location-tracker-${safe_branch}.tar
              if docker images | grep -q "location-tracker.*${safe_branch}"; then
                echo "Docker image loaded successfully"
              else
                echo "ERROR: Docker image failed to load"
                exit 1
              fi
            else
              echo "ERROR: Docker image tar file not found"
              ls -la /tmp/location-tracker-*.tar || echo "No tar files found"
              exit 1
            fi
            echo "Starting Docker container..."
            docker run -d \
              --name $container_name \
              --restart unless-stopped \
              -p 8081:8080 \
              -p 5052:5051 \
              -v /home/ec2-user/certs:/root/certs:ro \
              -e DB_HOST="${{ secrets[format('{0}_DB_HOST', matrix.instance)] }}" \
              -e DB_NAME="${{ secrets[format('{0}_DB_NAME', matrix.instance)] }}" \
              -e DB_USER="${{ secrets[format('{0}_DB_USER', matrix.instance)] }}" \
              -e DB_PASSWORD="${{ secrets[format('{0}_DB_PASSWORD', matrix.instance)] }}" \
              -e DB_SSLMODE=require \
              -e PORT=8080 \
              -e UDP_PORT=5051 \
              -e DOMAIN="${{ secrets[format('{0}_DOMAIN', matrix.instance)] }}" \
              -e AUTO_TLS=false \
              location-tracker:${safe_branch}
            echo "Waiting for container to start..."
            sleep 20
            if docker ps --format '{{.Names}}' | grep -q "^${container_name}$"; then
              echo "Container started successfully: $container_name"
              docker ps | grep $container_name
            else
              echo "ERROR: Container failed to start"
              echo "Container status:"
              docker ps -a | grep $container_name || echo "Container not found"
              echo "Container logs:"
              docker logs $container_name || echo "Failed to get logs"
              exit 1
            fi
            rm -f /tmp/location-tracker-${safe_branch}.tar

      - name: Health check and final verification
        if: matrix.deploy == 'true'
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            branch="${{ github.event.inputs.branch }}"
            safe_branch="${{ steps.prepare.outputs.safe_branch }}"
            container_name="location-tracker-${safe_branch}"
            echo "=== Final Health Check ==="
            echo "Recent container logs:"
            docker logs --tail 20 $container_name
            echo "Testing health endpoint..."
            max_attempts=5
            attempt=1
            while [ $attempt -le $max_attempts ]; do
              echo "HTTP health check attempt $attempt/$max_attempts..."
              if curl -f -s http://localhost:8081/api/health; then
                echo "HTTP health check PASSED"
                echo "=== Deployment Successful ==="
                echo "Feature branch: $branch"
                echo "Container: $container_name"
                echo "Local health: http://localhost:8081/api/health"
                if [ -f /etc/ssl/certs/location-tracker.crt ]; then
                  echo "Public URL: https://${{ secrets[format('{0}_DOMAIN', matrix.instance)] }}/test/$branch"
                else
                  echo "Public URL: http://${{ secrets[format('{0}_DOMAIN', matrix.instance)] }}/test/$branch"
                fi
                echo "Container status:"
                docker ps | head -1
                docker ps | grep $container_name
                exit 0
              else
                echo "HTTP health check failed (attempt $attempt/$max_attempts)"
                if [ $attempt -lt $max_attempts ]; then
                  echo "Waiting 10 seconds before retry..."
                  sleep 10
                fi
              fi
              attempt=$((attempt + 1))
            done
            echo "ERROR: All health checks failed"
            echo "Container status:"
            docker ps -a | grep $container_name
            echo "Recent container logs:"
            docker logs --tail 50 $container_name
            exit 1