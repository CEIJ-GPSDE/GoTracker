name: Deploy Main Branch

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      deploy_to_EC2_1:
        description: "Deploy to EC2_1"
        type: boolean
        default: true
      deploy_to_EC2_2:
        description: "Deploy to EC2_2"
        type: boolean
        default: true
      deploy_to_EC2_3:
        description: "Deploy to EC2_3"
        type: boolean
        default: true
      deploy_to_EC2_4:
        description: "Deploy to EC2_4"
        type: boolean
        default: true
      force_rebuild:
        description: "Force rebuild even if no changes"
        type: boolean
        default: false

jobs:
  deploy-main:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        instance: [EC2_1, EC2_2, EC2_3, EC2_4]
      fail-fast: false
    steps:
      - name: Determine deployment
        id: should_deploy
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            echo "deploy=true" >> $GITHUB_OUTPUT
            echo "Deploying ${{ matrix.instance }} (triggered by push)"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            case "${{ matrix.instance }}" in
              "EC2_1")
                deploy="${{ github.event.inputs.deploy_to_EC2_1 }}"
                ;;
              "EC2_2")
                deploy="${{ github.event.inputs.deploy_to_EC2_2 }}"
                ;;
              "EC2_3")
                deploy="${{ github.event.inputs.deploy_to_EC2_3 }}"
                ;;
              "EC2_4")
                deploy="${{ github.event.inputs.deploy_to_EC2_4 }}"
                ;;
            esac
            echo "deploy=$deploy" >> $GITHUB_OUTPUT
            echo "Deploying ${{ matrix.instance }}: $deploy (manual trigger)"
          else
            echo "deploy=false" >> $GITHUB_OUTPUT
            echo "Unknown event type, skipping deployment"
          fi

      - name: Skip unchecked instances
        if: steps.should_deploy.outputs.deploy != 'true'
        run: echo "Skipping ${{ matrix.instance }} - not selected for deployment"

      - uses: actions/checkout@v4
        if: steps.should_deploy.outputs.deploy == 'true'

      - name: Build Docker image
        if: steps.should_deploy.outputs.deploy == 'true'
        run: |
          echo "Building Docker image for main branch"
          echo "Triggered by: ${{ github.event_name }}"
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Manual deployment triggered"
            echo "Force rebuild: ${{ github.event.inputs.force_rebuild }}"
          fi
          docker build \
            --build-arg VERSION=main-$(git rev-parse --short HEAD) \
            --build-arg BASE_PATH= \
            -t location-tracker:main \
            .
          docker save location-tracker:main > location-tracker-main.tar
          echo "Docker image saved: location-tracker-main.tar"
          ls -la location-tracker-main.tar

      - name: Stop existing container and clean old deployments
        if: steps.should_deploy.outputs.deploy == 'true'
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            echo "Cleaning up existing main deployment..."
            echo "Deployment triggered by: ${{ github.event_name }}"
            
            # Stop and disable any systemd service
            if systemctl is-active --quiet location-tracker@main 2>/dev/null; then
              echo "Stopping old systemd service..."
              sudo systemctl stop location-tracker@main || echo "Service was not running"
              sudo systemctl disable location-tracker@main || echo "Service was not enabled"
            fi
            
            # Stop and remove location-tracker-main container
            if docker ps -a --format '{{.Names}}' | grep -q "^location-tracker-main$"; then
              echo "Stopping existing container: location-tracker-main"
              docker stop location-tracker-main || echo "Container was not running"
              docker rm -f location-tracker-main || echo "Failed to remove container"
            fi
            
            # Remove location-tracker:main image
            if docker images --format '{{.Repository}}:{{.Tag}}' | grep -q "^location-tracker:main$"; then
              echo "Removing old image: location-tracker:main"
              docker rmi -f location-tracker:main || echo "Failed to remove image"
            fi
            
            # Check for and free port 8080
            echo "Checking for processes using port 8080..."
            if sudo lsof -i :8080; then
              echo "Found processes using port 8080, attempting to terminate..."
              sudo lsof -i :8080 | awk 'NR>1 {print $2}' | xargs -r sudo kill -9 || echo "Failed to terminate some processes"
              sleep 2
              if sudo lsof -i :8080; then
                echo "ERROR: Port 8080 still in use after cleanup"
                sudo lsof -i :8080
                sudo netstat -tuln | grep :8080 || echo "No process listening on port 8080"
                exit 1
              fi
            else
              echo "Port 8080 is free"
            fi
            
            # Clean up any orphaned Docker containers
            if docker ps -a --format '{{.Names}}' | grep -q "location-tracker"; then
              echo "Removing orphaned location-tracker containers..."
              docker ps -a --filter "name=location-tracker" --format '{{.ID}}' | xargs -r docker rm -f || echo "Failed to remove some containers"
            fi
            
            # Only clean up the main nginx configuration - preserve feature branch configs
            echo "Cleaning up main nginx configuration..."
            sudo rm -f /etc/nginx/conf.d/location-tracker-main.conf
            
            mkdir -p /home/ec2-user/certs
            mkdir -p /home/ec2-user/logs
            echo "Cleanup completed"

      - name: Upload Docker image
        if: steps.should_deploy.outputs.deploy == 'true'
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          source: location-tracker-main.tar
          target: /tmp/

      - name: Deploy SSL certificates
        if: steps.should_deploy.outputs.deploy == 'true'
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            sudo mkdir -p /etc/ssl/certs /etc/ssl/private
            mkdir -p /home/ec2-user/certs
            if [ -n "${{ secrets[format('{0}_SSL_CERT', matrix.instance)] }}" ]; then
              echo "Deploying SSL certificate..."
              echo "${{ secrets[format('{0}_SSL_CERT', matrix.instance)] }}" | sudo tee /etc/ssl/certs/location-tracker.crt > /dev/null
              sudo chmod 644 /etc/ssl/certs/location-tracker.crt
              echo "${{ secrets[format('{0}_SSL_CERT', matrix.instance)] }}" > /home/ec2-user/certs/server.crt
              chmod 644 /home/ec2-user/certs/server.crt
            fi
            if [ -n "${{ secrets[format('{0}_SSL_KEY', matrix.instance)] }}" ]; then
              echo "Deploying SSL private key..."
              echo "${{ secrets[format('{0}_SSL_KEY', matrix.instance)] }}" | sudo tee /etc/ssl/private/location-tracker.key > /dev/null
              sudo chmod 600 /etc/ssl/private/location-tracker.key
              sudo chown root:root /etc/ssl/private/location-tracker.key
              echo "${{ secrets[format('{0}_SSL_KEY', matrix.instance)] }}" > /home/ec2-user/certs/server.key
              chmod 600 /home/ec2-user/certs/server.key
            fi
            echo "SSL certificates deployed successfully"

      - name: Setup Nginx configuration
        if: steps.should_deploy.outputs.deploy == 'true'
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            domain="${{ secrets[format('{0}_DOMAIN', matrix.instance)] }}"
            echo "Setting up Nginx configuration for domain: $domain"
            
            # Create main nginx configuration
            sudo tee /etc/nginx/conf.d/location-tracker-main.conf > /dev/null <<EOF
            # Main application configuration
            server {
                listen 80;
                server_name $domain;
                
                # Redirect HTTP to HTTPS if certificates exist
                location / {
                    proxy_pass http://127.0.0.1:8080;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                    proxy_cache_bypass \$http_upgrade;
                }
                
                location /ws {
                    proxy_pass http://127.0.0.1:8080/ws;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection "Upgrade";
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }
            }
            EOF
            
            # Add HTTPS server block if certificates exist
            if [ -f /etc/ssl/certs/location-tracker.crt ] && [ -f /etc/ssl/private/location-tracker.key ]; then
              echo "SSL certificates found, configuring HTTPS..."
              
              # First, update HTTP server to redirect to HTTPS
              sudo sed -i '/location \/ {/,/}/c\
                location / {\
                    return 301 https://$server_name$request_uri;\
                }' /etc/nginx/conf.d/location-tracker-main.conf
              
              # Then add HTTPS server block
              sudo tee -a /etc/nginx/conf.d/location-tracker-main.conf > /dev/null <<EOF
            
            # HTTPS server block
            server {
                listen 443 ssl http2;
                server_name $domain;
                
                ssl_certificate /etc/ssl/certs/location-tracker.crt;
                ssl_certificate_key /etc/ssl/private/location-tracker.key;
                ssl_protocols TLSv1.2 TLSv1.3;
                ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
                ssl_prefer_server_ciphers off;
                ssl_session_cache shared:SSL:10m;
                ssl_session_timeout 10m;
                
                add_header X-Frame-Options DENY;
                add_header X-Content-Type-Options nosniff;
                add_header X-XSS-Protection "1; mode=block";
                add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";
                add_header Referrer-Policy "strict-origin-when-cross-origin";
                
                location / {
                    proxy_pass http://127.0.0.1:8080;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                    proxy_cache_bypass \$http_upgrade;
                }
                
                location /ws {
                    proxy_pass http://127.0.0.1:8080/ws;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection "Upgrade";
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }
            }
            EOF
            else
              echo "No SSL certificates found, HTTP only configuration"
            fi
            
            # Test Nginx configuration
            echo "Testing nginx configuration..."
            if sudo nginx -t; then
              echo "Nginx configuration test passed"
              
              # Check if nginx is running
              if sudo systemctl is-active nginx; then
                echo "Nginx is running, reloading configuration..."
                sudo systemctl reload nginx
              else
                echo "Nginx is not running, starting..."
                sudo systemctl start nginx
              fi
              
              echo "Nginx configuration updated successfully"
            else
              echo "ERROR: Nginx configuration test failed"
              sudo nginx -t
              echo "Configuration content:"
              cat /etc/nginx/conf.d/location-tracker-main.conf
              exit 1
            fi

      - name: Load and start Docker container
        if: steps.should_deploy.outputs.deploy == 'true'
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            echo "Loading and starting Docker container: location-tracker-main"
            echo "Deployment method: ${{ github.event_name }}"
            
            # Load Docker image
            if [ -f "/tmp/location-tracker-main.tar" ]; then
              echo "Loading Docker image from tar file..."
              docker load < /tmp/location-tracker-main.tar
              if docker images | grep -q "location-tracker.*main"; then
                echo "Docker image loaded successfully"
              else
                echo "ERROR: Docker image failed to load"
                exit 1
              fi
            else
              echo "ERROR: Docker image tar file not found"
              ls -la /tmp/location-tracker-*.tar || echo "No tar files found"
              exit 1
            fi
            
            # Start Docker container
            echo "Starting Docker container..."
            docker run -d \
              --name location-tracker-main \
              --restart unless-stopped \
              -p 8080:8080 \
              -p 5051:5051 \
              -v /home/ec2-user/certs:/root/certs:ro \
              -v /home/ec2-user/logs:/var/log \
              -e DB_HOST="${{ secrets[format('{0}_DB_HOST', matrix.instance)] }}" \
              -e DB_NAME="${{ secrets[format('{0}_DB_NAME', matrix.instance)] }}" \
              -e DB_USER="${{ secrets[format('{0}_DB_USER', matrix.instance)] }}" \
              -e DB_PASSWORD="${{ secrets[format('{0}_DB_PASSWORD', matrix.instance)] }}" \
              -e DB_SSLMODE=require \
              -e PORT=8080 \
              -e UDP_PORT=5051 \
              -e DOMAIN="${{ secrets[format('{0}_DOMAIN', matrix.instance)] }}" \
              -e AUTO_TLS=false \
              location-tracker:main
            
            echo "Waiting for container to start..."
            sleep 30
            
            if docker ps --format '{{.Names}}' | grep -q "^location-tracker-main$"; then
              echo "Container started successfully: location-tracker-main"
              docker ps | grep location-tracker-main
            else
              echo "ERROR: Container failed to start"
              echo "Container status:"
              docker ps -a | grep location-tracker-main || echo "Container not found"
              echo "Container logs:"
              docker logs location-tracker-main || echo "Failed to get logs"
              exit 1
            fi
            
            rm -f /tmp/location-tracker-main.tar

      - name: Health check and final verification
        if: steps.should_deploy.outputs.deploy == 'true'
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            echo "=== Final Health Check ==="
            echo "Deployment triggered by: ${{ github.event_name }}"
            echo "Container status:"
            docker ps | head -1
            docker ps | grep location-tracker-main
            
            max_attempts=5
            attempt=1
            while [ $attempt -le $max_attempts ]; do
              echo "Health check attempt $attempt/$max_attempts..."
              if curl -f -s http://localhost:8080/api/health; then
                echo "Health check PASSED"
                echo "=== Deployment Successful ==="
                echo "Container: location-tracker-main"
                echo "Local health: http://localhost:8080/api/health"
                if [ -f /etc/ssl/certs/location-tracker.crt ]; then
                  echo "Public URL: https://${{ secrets[format('{0}_DOMAIN', matrix.instance)] }}"
                else
                  echo "Public URL: http://${{ secrets[format('{0}_DOMAIN', matrix.instance)] }}"
                fi
                exit 0
              else
                echo "Health check failed (attempt $attempt/$max_attempts)"
                if [ $attempt -lt $max_attempts ]; then
                  echo "Waiting 10 seconds before retry..."
                  sleep 10
                fi
              fi
              attempt=$((attempt + 1))
            done
            
            echo "ERROR: All health checks failed"
            echo "Container status:"
            docker ps -a | grep location-tracker-main
            echo "Recent container logs:"
            docker logs --tail 50 location-tracker-main
            exit 1