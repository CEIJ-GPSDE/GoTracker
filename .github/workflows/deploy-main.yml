name: Deploy Main Branch

on:
  push:
    branches:
      - main

jobs:
  deploy-main:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        instance: [EC2_1, EC2_2, EC2_3, EC2_4]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - name: Build main
        run: |
          go mod tidy
          safe_branch="main"
          mkdir -p build/${safe_branch}/static
          go build -ldflags="-X main.Version=main-$(git rev-parse --short HEAD)" -o build/${safe_branch}/app-${safe_branch} main.go
          cp static/index.html build/${safe_branch}/static/index.html
      - name: Prepare deploy folder
        run: |
          safe_branch="main"
          mkdir -p deploy/${safe_branch}
          mv build/${safe_branch}/* deploy/${safe_branch}/
      - name: Stop existing service and clean old binaries
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            safe_branch="main"
            echo "Stopping existing service..."
            sudo systemctl stop location-tracker@${safe_branch} || echo "Service was not running"
            
            echo "Cleaning old binaries..."
            rm -f /home/ec2-user/app/${safe_branch}/app-${safe_branch}* || echo "No old binaries to remove"
            
            echo "Creating app directory structure..."
            mkdir -p /home/ec2-user/app/${safe_branch}/static
            mkdir -p /home/ec2-user/app/${safe_branch}/certs
      - name: Upload to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          source: "deploy/main/*"
          target: "/home/ec2-user/app/main/"
          strip_components: 2
          overwrite: true
      - name: Verify file upload for main
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            echo "=== Checking uploaded files for main ==="
            echo "Directory contents:"
            ls -la /home/ec2-user/app/main/
            
            echo "Looking for binary file:"
            find /home/ec2-user/app/main/ -name "app-*" -type f
            
            echo "Setting executable permissions on all binaries..."
            find /home/ec2-user/app/main/ -name "app-*" -type f -exec chmod +x {} \;
      - name: Deploy SSL certificates
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            # Create certificates directory
            sudo mkdir -p /etc/ssl/certs /etc/ssl/private
            
            # Deploy SSL certificate (if provided)
            if [ -n "${{ secrets[format('{0}_SSL_CERT', matrix.instance)] }}" ]; then
              echo "Deploying SSL certificate..."
              echo '${{ secrets[format('{0}_SSL_CERT', matrix.instance)] }}' | sudo tee /etc/ssl/certs/location-tracker.crt > /dev/null
              sudo chmod 644 /etc/ssl/certs/location-tracker.crt
            fi
            
            # Deploy SSL private key (if provided)
            if [ -n "${{ secrets[format('{0}_SSL_KEY', matrix.instance)] }}" ]; then
              echo "Deploying SSL private key..."
              echo '${{ secrets[format('{0}_SSL_KEY', matrix.instance)] }}' | sudo tee /etc/ssl/private/location-tracker.key > /dev/null
              sudo chmod 600 /etc/ssl/private/location-tracker.key
              sudo chown root:root /etc/ssl/private/location-tracker.key
            fi
            
            # Also create app-level certificates for Go application
            mkdir -p /home/ec2-user/app/main/certs
            if [ -n "${{ secrets[format('{0}_SSL_CERT', matrix.instance)] }}" ]; then
              echo '${{ secrets[format('{0}_SSL_CERT', matrix.instance)] }}' > /home/ec2-user/app/main/certs/server.crt
              chmod 644 /home/ec2-user/app/main/certs/server.crt
            fi
            if [ -n "${{ secrets[format('{0}_SSL_KEY', matrix.instance)] }}" ]; then
              echo '${{ secrets[format('{0}_SSL_KEY', matrix.instance)] }}' > /home/ec2-user/app/main/certs/server.key
              chmod 600 /home/ec2-user/app/main/certs/server.key
            fi
            
            echo "SSL certificates deployed successfully"
      - name: Setup Nginx configuration for main
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            # Create main nginx configuration
            sudo bash -c "cat > /etc/nginx/conf.d/location-tracker-main.conf <<EOF
            server {
                listen 80;
                server_name ${{ secrets[format('{0}_DOMAIN', matrix.instance)] }};
                
                # Redirect HTTP to HTTPS only if SSL certificates exist
                location / {
                    if (-f /etc/ssl/certs/location-tracker.crt) {
                        return 301 https://\\\$server_name\\\$request_uri;
                    }
                    # Fallback to HTTP proxy if no SSL
                    proxy_pass http://127.0.0.1:8080;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \\\$http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host \\\$host;
                    proxy_set_header X-Real-IP \\\$remote_addr;
                    proxy_set_header X-Forwarded-For \\\$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \\\$scheme;
                    proxy_cache_bypass \\\$http_upgrade;
                }
            }
            EOF"
            
            # Add HTTPS server block only if certificates exist
            if [ -f /etc/ssl/certs/location-tracker.crt ] && [ -f /etc/ssl/private/location-tracker.key ]; then
              echo "SSL certificates found, configuring HTTPS..."
              sudo bash -c "cat >> /etc/nginx/conf.d/location-tracker-main.conf <<EOF
            
            server {
                listen 443 ssl http2;
                server_name ${{ secrets[format('{0}_DOMAIN', matrix.instance)] }};
                
                # SSL configuration
                ssl_certificate /etc/ssl/certs/location-tracker.crt;
                ssl_certificate_key /etc/ssl/private/location-tracker.key;
                ssl_protocols TLSv1.2 TLSv1.3;
                ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
                ssl_prefer_server_ciphers off;
                ssl_session_cache shared:SSL:10m;
                ssl_session_timeout 10m;
                
                # Security headers
                add_header X-Frame-Options DENY;
                add_header X-Content-Type-Options nosniff;
                add_header X-XSS-Protection \"1; mode=block\";
                add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\";
                add_header Referrer-Policy \"strict-origin-when-cross-origin\";
                
                # Main application
                location / {
                    proxy_pass http://127.0.0.1:8080;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \\\$http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host \\\$host;
                    proxy_set_header X-Real-IP \\\$remote_addr;
                    proxy_set_header X-Forwarded-For \\\$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \\\$scheme;
                    proxy_cache_bypass \\\$http_upgrade;
                }
                
                # WebSocket support
                location /ws {
                    proxy_pass http://127.0.0.1:8080;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \\\$http_upgrade;
                    proxy_set_header Connection \"Upgrade\";
                    proxy_set_header Host \\\$host;
                    proxy_set_header X-Real-IP \\\$remote_addr;
                    proxy_set_header X-Forwarded-For \\\$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \\\$scheme;
                }
            }
            EOF"
            else
              echo "No SSL certificates found, HTTPS server block not configured"
            fi
            
            # Test nginx configuration
            if sudo nginx -t; then
              sudo systemctl reload nginx
              echo "Nginx configuration updated successfully"
            else
              echo "Nginx configuration test failed"
              exit 1
            fi
      - name: Verify uploaded binary and database connection
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            echo "=== Final verification for main ==="
            ls -la /home/ec2-user/app/main/
            
            # Check if binary exists and is executable
            binary_path="/home/ec2-user/app/main/app-main"
            if [ -f "$binary_path" ]; then
              echo "✅ Binary found at: $binary_path"
              chmod +x "$binary_path"
              ls -la "$binary_path"
            else
              echo "❌ Binary NOT found at expected path: $binary_path"
              echo "Contents of directory:"
              find /home/ec2-user/app/main/ -type f
              exit 1
            fi
            
            # Test database connection
            export DB_HOST="${{ secrets[format('{0}_DB_HOST', matrix.instance)] }}"
            export DB_NAME="${{ secrets[format('{0}_DB_NAME', matrix.instance)] }}"
            export DB_USER="${{ secrets[format('{0}_DB_USER', matrix.instance)] }}"
            export DB_PASSWORD="${{ secrets[format('{0}_DB_PASSWORD', matrix.instance)] }}"
            export DB_SSLMODE="require"
            export PORT="8080"
            export HTTPS_PORT="8443"
            
            echo "Testing database connection..."
            psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME" -c "SELECT 1" || echo "Database connection failed: $?"
            
            echo "Testing binary version..."
            "$binary_path" --version || echo "Failed to run binary: $?"
      - name: Update and restart service
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            safe_branch="main"
            sudo bash -c "cat > /etc/systemd/system/location-tracker@\${safe_branch}.service <<EOF
            [Unit]
            Description=Location Tracker (%i)
            After=network.target

            [Service]
            ExecStart=/home/ec2-user/app/%i/app-%i
            Restart=always
            RestartSec=10
            User=ec2-user
            WorkingDirectory=/home/ec2-user/app/%i
            Environment=DB_HOST=${{ secrets[format('{0}_DB_HOST', matrix.instance)] }}
            Environment=DB_NAME=${{ secrets[format('{0}_DB_NAME', matrix.instance)] }}
            Environment=DB_USER=${{ secrets[format('{0}_DB_USER', matrix.instance)] }}
            Environment=DB_PASSWORD=${{ secrets[format('{0}_DB_PASSWORD', matrix.instance)] }}
            Environment=DB_SSLMODE=require
            Environment=PORT=8080
            Environment=HTTPS_PORT=8443
            Environment=DOMAIN=${{ secrets[format('{0}_DOMAIN', matrix.instance)] }}
            Environment=AUTO_TLS=false
            Environment=UDP_PORT=5051
            Environment=LOG_FILE=/var/log/location-tracker-%i.log
            
            # Security settings
            NoNewPrivileges=true
            ProtectSystem=strict
            ProtectHome=true
            ReadWritePaths=/home/ec2-user/app/%i /var/log
            PrivateTmp=true

            [Install]
            WantedBy=multi-user.target
            EOF"
            
            # Create log file with proper permissions
            sudo touch /var/log/location-tracker-${safe_branch}.log
            sudo chown ec2-user:ec2-user /var/log/location-tracker-${safe_branch}.log
            
            sudo chmod 644 /etc/systemd/system/location-tracker@${safe_branch}.service
            sudo systemctl daemon-reload
            sudo systemctl restart location-tracker@${safe_branch}
            sudo systemctl enable location-tracker@${safe_branch}
            
            # Wait for service to start
            sleep 10
            
            # Verify service status and logs
            echo "=== Service Status ==="
            sudo systemctl status location-tracker@${safe_branch} --no-pager -l
            
            echo "=== Service Environment ==="
            sudo systemctl show location-tracker@${safe_branch} --property=Environment
            
            echo "=== Recent Logs ==="
            sudo journalctl -u location-tracker@${safe_branch} --no-pager -l -n 20
            
            # Check if service is running
            if sudo systemctl is-active location-tracker@${safe_branch} >/dev/null; then
              echo "✅ Service is running successfully"
              # Test HTTP endpoint
              curl -f http://localhost:8080/api/health || echo "❌ HTTP health check failed"
            else
              echo "❌ Service failed to start"
              sudo journalctl -u location-tracker@${safe_branch} --no-pager -l -n 50
              exit 1
            fi