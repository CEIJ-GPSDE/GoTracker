name: Deploy Main Branch

on:
  push:
    branches:
      - main

jobs:
  deploy-main:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        instance: [EC2_1, EC2_2, EC2_3, EC2_4]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      
      - name: Build Docker image
        run: |
          echo "Building Docker image for main branch"
          
          # Build the Docker image
          docker build \
            --build-arg VERSION=main-$(git rev-parse --short HEAD) \
            -t location-tracker:main \
            .
          
          # Save image to tar file for transfer
          docker save location-tracker:main > location-tracker-main.tar
          
          echo "Docker image saved: location-tracker-main.tar"
          ls -la location-tracker-main.tar
          
      - name: Stop existing container and clean old deployments
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            echo "Cleaning up existing main deployment..."
            
            # Stop and remove existing systemd service (migration cleanup)
            if systemctl is-active --quiet location-tracker@main 2>/dev/null; then
              echo "Stopping old systemd service..."
              sudo systemctl stop location-tracker@main || echo "Service was not running"
              sudo systemctl disable location-tracker@main || echo "Service was not enabled"
            fi
            
            # Stop and remove existing container
            if docker ps -a --format '{{.Names}}' | grep -q "^location-tracker-main$"; then
              echo "Stopping existing container: location-tracker-main"
              docker stop location-tracker-main || echo "Container was not running"
              docker rm location-tracker-main || echo "Failed to remove container"
            fi
            
            # Remove old image
            if docker images --format '{{.Repository}}:{{.Tag}}' | grep -q "^location-tracker:main$"; then
              echo "Removing old image: location-tracker:main"
              docker rmi location-tracker:main || echo "Failed to remove image"
            fi
            
            # Create directory for SSL certificates and logs
            mkdir -p /home/ec2-user/certs
            mkdir -p /home/ec2-user/logs
            echo "Cleanup completed"
            
      - name: Upload Docker image
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          source: "location-tracker-main.tar"
          target: "/tmp/"
          
      - name: Deploy SSL certificates
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            # Create certificates directories
            sudo mkdir -p /etc/ssl/certs /etc/ssl/private
            mkdir -p /home/ec2-user/certs
            
            # Deploy SSL certificate (if provided)
            if [ -n "${{ secrets[format('{0}_SSL_CERT', matrix.instance)] }}" ]; then
              echo "Deploying SSL certificate..."
              echo '${{ secrets[format('{0}_SSL_CERT', matrix.instance)] }}' | sudo tee /etc/ssl/certs/location-tracker.crt > /dev/null
              sudo chmod 644 /etc/ssl/certs/location-tracker.crt
              
              # Also copy to app directory for Docker
              echo '${{ secrets[format('{0}_SSL_CERT', matrix.instance)] }}' > /home/ec2-user/certs/server.crt
              chmod 644 /home/ec2-user/certs/server.crt
            fi
            
            # Deploy SSL private key (if provided)
            if [ -n "${{ secrets[format('{0}_SSL_KEY', matrix.instance)] }}" ]; then
              echo "Deploying SSL private key..."
              echo '${{ secrets[format('{0}_SSL_KEY', matrix.instance)] }}' | sudo tee /etc/ssl/private/location-tracker.key > /dev/null
              sudo chmod 600 /etc/ssl/private/location-tracker.key
              sudo chown root:root /etc/ssl/private/location-tracker.key
              
              # Also copy to app directory for Docker
              echo '${{ secrets[format('{0}_SSL_KEY', matrix.instance)] }}' > /home/ec2-user/certs/server.key
              chmod 600 /home/ec2-user/certs/server.key
            fi
            
            echo "SSL certificates deployed successfully"
            
      - name: Setup Nginx configuration
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            # Clean up stale configuration files
            sudo find /etc/nginx/conf.d -type f -name 'location-tracker-*.conf' ! -name 'location-tracker-main.conf' -exec rm {} \;
            
            # Create main nginx configuration
            sudo tee /etc/nginx/conf.d/location-tracker-main.conf > /dev/null <<'EOF'
            # Main application configuration
            server {
                listen 80;
                server_name ${{ secrets[format('{0}_DOMAIN', matrix.instance)] }};
                
                # Main application root
                location / {
                    proxy_pass http://127.0.0.1:8080;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_cache_bypass $http_upgrade;
                }
                
                # WebSocket support for main app
                location /ws {
                    proxy_pass http://127.0.0.1:8080;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "Upgrade";
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                }
            }
            
            # Public IP redirect from 8080
            server {
                listen 8080;
                server_name _;  # Catch-all for IP-based requests
                
                location / {
                    if (-f /etc/ssl/certs/location-tracker.crt) {
                        return 301 https://$host$request_uri;
                    }
                    return 301 http://$host$request_uri;
                }
            }
            EOF
            
            # Add HTTPS server block if certificates exist
            if [ -f /etc/ssl/certs/location-tracker.crt ] && [ -f /etc/ssl/private/location-tracker.key ]; then
              echo "SSL certificates found, configuring HTTPS..."
              
              sudo tee -a /etc/nginx/conf.d/location-tracker-main.conf > /dev/null <<'EOF'
              # HTTPS server block
              server {
                  listen 443 ssl;
                  http2 on;
                  server_name ${{ secrets[format('{0}_DOMAIN', matrix.instance)] }};
                  
                  ssl_certificate /etc/ssl/certs/location-tracker.crt;
                  ssl_certificate_key /etc/ssl/private/location-tracker.key;
                  ssl_protocols TLSv1.2 TLSv1.3;
                  ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
                  ssl_prefer_server_ciphers off;
                  ssl_session_cache shared:SSL:10m;
                  ssl_session_timeout 10m;
                  
                  add_header X-Frame-Options DENY;
                  add_header X-Content-Type-Options nosniff;
                  add_header X-XSS-Protection "1; mode=block";
                  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";
                  add_header Referrer-Policy "strict-origin-when-cross-origin";
                  
                  location / {
                      proxy_pass http://127.0.0.1:8080;
                      proxy_http_version 1.1;
                      proxy_set_header Upgrade $http_upgrade;
                      proxy_set_header Connection 'upgrade';
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto $scheme;
                      proxy_cache_bypass $http_upgrade;
                  }
                  
                  location /ws {
                      proxy_pass http://127.0.0.1:8080;
                      proxy_http_version 1.1;
                      proxy_set_header Upgrade $http_upgrade;
                      proxy_set_header Connection "Upgrade";
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto $scheme;
                  }
              }
              EOF
              
              # Update HTTP server to redirect to HTTPS, preserving feature branch locations
              sudo sed -i '/# Main application root/,/}/c\
                # Redirect main app to HTTPS\
                location = / {\
                    return 301 https://$server_name$request_uri;\
                }\
                \
                # Redirect main app paths to HTTPS (but not /test/)\
                location ~ ^/(?!test/) {\
                    return 301 https://$server_name$request_uri;\
                }' /etc/nginx/conf.d/location-tracker-main.conf
            fi
            
            # Test and reload nginx configuration
            if sudo nginx -t; then
              sudo systemctl reload nginx
              echo "Nginx configuration updated successfully"
            else
              echo "Nginx configuration test failed"
              exit 1
            fi
            
      - name: Load and start Docker container
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            echo "Loading and starting Docker container: location-tracker-main"
            
            # Load Docker image
            if [ -f "/tmp/location-tracker-main.tar" ]; then
              echo "Loading Docker image from tar file..."
              docker load < /tmp/location-tracker-main.tar
              
              # Verify image was loaded
              if docker images | grep -q "location-tracker.*main"; then
                echo "Docker image loaded successfully"
              else
                echo "ERROR: Docker image failed to load"
                exit 1
              fi
            else
              echo "ERROR: Docker image tar file not found"
              ls -la /tmp/location-tracker-*.tar || echo "No tar files found"
              exit 1
            fi
            
            # Start the container (removed port 8443)
            echo "Starting Docker container..."
            docker run -d \
              --name location-tracker-main \
              --restart unless-stopped \
              -p 8080:8080 \
              -p 5051:5051 \
              -v /home/ec2-user/certs:/root/certs:ro \
              -v /home/ec2-user/logs:/var/log \
              -e DB_HOST="${{ secrets[format('{0}_DB_HOST', matrix.instance)] }}" \
              -e DB_NAME="${{ secrets[format('{0}_DB_NAME', matrix.instance)] }}" \
              -e DB_USER="${{ secrets[format('{0}_DB_USER', matrix.instance)] }}" \
              -e DB_PASSWORD="${{ secrets[format('{0}_DB_PASSWORD', matrix.instance)] }}" \
              -e DB_SSLMODE=require \
              -e PORT=8080 \
              -e UDP_PORT=5051 \
              -e DOMAIN="${{ secrets[format('{0}_DOMAIN', matrix.instance)] }}" \
              -e AUTO_TLS=false \
              location-tracker:main
            
            # Wait for container to start
            echo "Waiting for container to start..."
            sleep 20
            
            # Verify container is running
            if docker ps --format '{{.Names}}' | grep -q "^location-tracker-main$"; then
              echo "Container started successfully: location-tracker-main"
              docker ps | grep location-tracker-main
            else
              echo "ERROR: Container failed to start"
              echo "Container status:"
              docker ps -a | grep location-tracker-main || echo "Container not found"
              echo "Container logs:"
              docker logs location-tracker-main || echo "Failed to get logs"
              exit 1
            fi
            
            # Clean up tar file
            rm -f /tmp/location-tracker-main.tar
            
      - name: Test container and database connection
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            echo "=== Final verification ==="
            
            # Check container status
            echo "Container status:"
            docker ps | head -1
            docker ps | grep location-tracker-main
            
            # Show recent container logs
            echo "Recent container logs:"
            docker logs --tail 20 location-tracker-main
            
            # Test database connection using container
            echo "Testing database connection..."
            docker exec location-tracker-main sh -c '
              if command -v psql >/dev/null; then
                PGPASSWORD="$DB_PASSWORD" psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME" -c "SELECT 1" || echo "Database connection test failed"
              else
                echo "psql not available in container, skipping database test"
              fi
            ' || echo "Database test failed"
            
      - name: Health check and final verification
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets[format('{0}_HOST', matrix.instance)] }}
          username: ${{ secrets[format('{0}_USER', matrix.instance)] }}
          key: ${{ secrets[format('{0}_SSH_KEY', matrix.instance)] }}
          script: |
            echo "=== Final Health Check ==="
            
            # Check container status
            echo "Container status:"
            docker ps | head -1
            docker ps | grep location-tracker-main
            
            # Test HTTP health endpoint
            max_attempts=5
            attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "HTTP health check attempt $attempt/$max_attempts..."
              
              if curl -f -s http://localhost:8080/api/health; then
                echo "HTTP health check PASSED"
                
                # Display success information
                echo "=== Deployment Successful ==="
                echo "Container: location-tracker-main"
                echo "Local health: http://localhost:8080/api/health"
                if [ -f /etc/ssl/certs/location-tracker.crt ]; then
                  echo "Public URL: https://${{ secrets[format('{0}_DOMAIN', matrix.instance)] }}"
                else
                  echo "Public URL: http://${{ secrets[format('{0}_DOMAIN', matrix.instance)] }}"
                fi
                
                # Show container status
                echo "Container status:"
                docker ps | head -1
                docker ps | grep location-tracker-main
                
                exit 0
              else
                echo "HTTP health check failed (attempt $attempt/$max_attempts)"
                if [ $attempt -lt $max_attempts ]; then
                  echo "Waiting 10 seconds before retry..."
                  sleep 10
                fi
              fi
              
              attempt=$((attempt + 1))
            done
            
            # If we get here, all health checks failed
            echo "ERROR: All health checks failed"
            echo "Container status:"
            docker ps -a | grep location-tracker-main
            echo "Recent container logs:"
            docker logs --tail 50 location-tracker-main
            exit 1